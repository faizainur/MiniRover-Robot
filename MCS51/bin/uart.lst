                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module uart
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _P_NC
                                     12 	.globl _CY
                                     13 	.globl _AC
                                     14 	.globl _F0
                                     15 	.globl _RS1
                                     16 	.globl _RS0
                                     17 	.globl _OV
                                     18 	.globl _FL
                                     19 	.globl _P
                                     20 	.globl _PS
                                     21 	.globl _PT1
                                     22 	.globl _PX1
                                     23 	.globl _PT0
                                     24 	.globl _PX0
                                     25 	.globl _RD
                                     26 	.globl _WR
                                     27 	.globl _T1
                                     28 	.globl _T0
                                     29 	.globl _INT1
                                     30 	.globl _INT0
                                     31 	.globl _TXD
                                     32 	.globl _RXD
                                     33 	.globl _P3_7
                                     34 	.globl _P3_6
                                     35 	.globl _P3_5
                                     36 	.globl _P3_4
                                     37 	.globl _P3_3
                                     38 	.globl _P3_2
                                     39 	.globl _P3_1
                                     40 	.globl _P3_0
                                     41 	.globl _EA
                                     42 	.globl _ES
                                     43 	.globl _ET1
                                     44 	.globl _EX1
                                     45 	.globl _ET0
                                     46 	.globl _EX0
                                     47 	.globl _P2_7
                                     48 	.globl _P2_6
                                     49 	.globl _P2_5
                                     50 	.globl _P2_4
                                     51 	.globl _P2_3
                                     52 	.globl _P2_2
                                     53 	.globl _P2_1
                                     54 	.globl _P2_0
                                     55 	.globl _SM0
                                     56 	.globl _SM1
                                     57 	.globl _SM2
                                     58 	.globl _REN
                                     59 	.globl _TB8
                                     60 	.globl _RB8
                                     61 	.globl _TI
                                     62 	.globl _RI
                                     63 	.globl _P1_7
                                     64 	.globl _P1_6
                                     65 	.globl _P1_5
                                     66 	.globl _P1_4
                                     67 	.globl _P1_3
                                     68 	.globl _P1_2
                                     69 	.globl _P1_1
                                     70 	.globl _P1_0
                                     71 	.globl _TF1
                                     72 	.globl _TR1
                                     73 	.globl _TF0
                                     74 	.globl _TR0
                                     75 	.globl _IE1
                                     76 	.globl _IT1
                                     77 	.globl _IE0
                                     78 	.globl _IT0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _B
                                     88 	.globl _A
                                     89 	.globl _ACC
                                     90 	.globl _PSW
                                     91 	.globl _IP
                                     92 	.globl _P3
                                     93 	.globl _IE
                                     94 	.globl _P2
                                     95 	.globl _SBUF
                                     96 	.globl _SCON
                                     97 	.globl _P1
                                     98 	.globl _TH1
                                     99 	.globl _TH0
                                    100 	.globl _TL1
                                    101 	.globl _TL0
                                    102 	.globl _TMOD
                                    103 	.globl _TCON
                                    104 	.globl _PCON
                                    105 	.globl _DPH
                                    106 	.globl _DPL
                                    107 	.globl _SP
                                    108 	.globl _P0
                                    109 	.globl _UART_TxNumber_PARM_3
                                    110 	.globl _UART_TxNumber_PARM_2
                                    111 	.globl _UART_Init
                                    112 	.globl _UART_SetBaudRate
                                    113 	.globl _UART_RxChar
                                    114 	.globl _UART_TxChar
                                    115 	.globl _UART_TxString
                                    116 	.globl _UART_RxString
                                    117 	.globl _UART_TxNumber
                                    118 	.globl _UART_Printf
                                    119 ;--------------------------------------------------------
                                    120 ; special function registers
                                    121 ;--------------------------------------------------------
                                    122 	.area RSEG    (ABS,DATA)
      000000                        123 	.org 0x0000
                           000080   124 _P0	=	0x0080
                           000081   125 _SP	=	0x0081
                           000082   126 _DPL	=	0x0082
                           000083   127 _DPH	=	0x0083
                           000087   128 _PCON	=	0x0087
                           000088   129 _TCON	=	0x0088
                           000089   130 _TMOD	=	0x0089
                           00008A   131 _TL0	=	0x008a
                           00008B   132 _TL1	=	0x008b
                           00008C   133 _TH0	=	0x008c
                           00008D   134 _TH1	=	0x008d
                           000090   135 _P1	=	0x0090
                           000098   136 _SCON	=	0x0098
                           000099   137 _SBUF	=	0x0099
                           0000A0   138 _P2	=	0x00a0
                           0000A8   139 _IE	=	0x00a8
                           0000B0   140 _P3	=	0x00b0
                           0000B8   141 _IP	=	0x00b8
                           0000D0   142 _PSW	=	0x00d0
                           0000E0   143 _ACC	=	0x00e0
                           0000E0   144 _A	=	0x00e0
                           0000F0   145 _B	=	0x00f0
                                    146 ;--------------------------------------------------------
                                    147 ; special function bits
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0_0	=	0x0080
                           000081   152 _P0_1	=	0x0081
                           000082   153 _P0_2	=	0x0082
                           000083   154 _P0_3	=	0x0083
                           000084   155 _P0_4	=	0x0084
                           000085   156 _P0_5	=	0x0085
                           000086   157 _P0_6	=	0x0086
                           000087   158 _P0_7	=	0x0087
                           000088   159 _IT0	=	0x0088
                           000089   160 _IE0	=	0x0089
                           00008A   161 _IT1	=	0x008a
                           00008B   162 _IE1	=	0x008b
                           00008C   163 _TR0	=	0x008c
                           00008D   164 _TF0	=	0x008d
                           00008E   165 _TR1	=	0x008e
                           00008F   166 _TF1	=	0x008f
                           000090   167 _P1_0	=	0x0090
                           000091   168 _P1_1	=	0x0091
                           000092   169 _P1_2	=	0x0092
                           000093   170 _P1_3	=	0x0093
                           000094   171 _P1_4	=	0x0094
                           000095   172 _P1_5	=	0x0095
                           000096   173 _P1_6	=	0x0096
                           000097   174 _P1_7	=	0x0097
                           000098   175 _RI	=	0x0098
                           000099   176 _TI	=	0x0099
                           00009A   177 _RB8	=	0x009a
                           00009B   178 _TB8	=	0x009b
                           00009C   179 _REN	=	0x009c
                           00009D   180 _SM2	=	0x009d
                           00009E   181 _SM1	=	0x009e
                           00009F   182 _SM0	=	0x009f
                           0000A0   183 _P2_0	=	0x00a0
                           0000A1   184 _P2_1	=	0x00a1
                           0000A2   185 _P2_2	=	0x00a2
                           0000A3   186 _P2_3	=	0x00a3
                           0000A4   187 _P2_4	=	0x00a4
                           0000A5   188 _P2_5	=	0x00a5
                           0000A6   189 _P2_6	=	0x00a6
                           0000A7   190 _P2_7	=	0x00a7
                           0000A8   191 _EX0	=	0x00a8
                           0000A9   192 _ET0	=	0x00a9
                           0000AA   193 _EX1	=	0x00aa
                           0000AB   194 _ET1	=	0x00ab
                           0000AC   195 _ES	=	0x00ac
                           0000AF   196 _EA	=	0x00af
                           0000B0   197 _P3_0	=	0x00b0
                           0000B1   198 _P3_1	=	0x00b1
                           0000B2   199 _P3_2	=	0x00b2
                           0000B3   200 _P3_3	=	0x00b3
                           0000B4   201 _P3_4	=	0x00b4
                           0000B5   202 _P3_5	=	0x00b5
                           0000B6   203 _P3_6	=	0x00b6
                           0000B7   204 _P3_7	=	0x00b7
                           0000B0   205 _RXD	=	0x00b0
                           0000B1   206 _TXD	=	0x00b1
                           0000B2   207 _INT0	=	0x00b2
                           0000B3   208 _INT1	=	0x00b3
                           0000B4   209 _T0	=	0x00b4
                           0000B5   210 _T1	=	0x00b5
                           0000B6   211 _WR	=	0x00b6
                           0000B7   212 _RD	=	0x00b7
                           0000B8   213 _PX0	=	0x00b8
                           0000B9   214 _PT0	=	0x00b9
                           0000BA   215 _PX1	=	0x00ba
                           0000BB   216 _PT1	=	0x00bb
                           0000BC   217 _PS	=	0x00bc
                           0000D0   218 _P	=	0x00d0
                           0000D1   219 _FL	=	0x00d1
                           0000D2   220 _OV	=	0x00d2
                           0000D3   221 _RS0	=	0x00d3
                           0000D4   222 _RS1	=	0x00d4
                           0000D5   223 _F0	=	0x00d5
                           0000D6   224 _AC	=	0x00d6
                           0000D7   225 _CY	=	0x00d7
                           0000FF   226 _P_NC	=	0x00ff
                                    227 ;--------------------------------------------------------
                                    228 ; overlayable register banks
                                    229 ;--------------------------------------------------------
                                    230 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        231 	.ds 8
                                    232 ;--------------------------------------------------------
                                    233 ; internal ram data
                                    234 ;--------------------------------------------------------
                                    235 	.area DSEG    (DATA)
      000000                        236 _UART_TxNumber_PARM_2:
      000000                        237 	.ds 4
      000004                        238 _UART_TxNumber_PARM_3:
      000004                        239 	.ds 1
      000005                        240 _UART_TxNumber_v_numericSystem_u8_65536_28:
      000005                        241 	.ds 1
      000006                        242 _UART_TxNumber_i_65536_29:
      000006                        243 	.ds 1
      000007                        244 _UART_TxNumber_a_65536_29:
      000007                        245 	.ds 10
      000011                        246 _UART_TxNumber_sloc0_1_0:
      000011                        247 	.ds 1
                                    248 ;--------------------------------------------------------
                                    249 ; overlayable items in internal ram 
                                    250 ;--------------------------------------------------------
                                    251 	.area	OSEG    (OVR,DATA)
                                    252 ;--------------------------------------------------------
                                    253 ; indirectly addressable internal ram data
                                    254 ;--------------------------------------------------------
                                    255 	.area ISEG    (DATA)
                                    256 ;--------------------------------------------------------
                                    257 ; absolute internal ram data
                                    258 ;--------------------------------------------------------
                                    259 	.area IABS    (ABS,DATA)
                                    260 	.area IABS    (ABS,DATA)
                                    261 ;--------------------------------------------------------
                                    262 ; bit data
                                    263 ;--------------------------------------------------------
                                    264 	.area BSEG    (BIT)
                                    265 ;--------------------------------------------------------
                                    266 ; paged external ram data
                                    267 ;--------------------------------------------------------
                                    268 	.area PSEG    (PAG,XDATA)
                                    269 ;--------------------------------------------------------
                                    270 ; external ram data
                                    271 ;--------------------------------------------------------
                                    272 	.area XSEG    (XDATA)
                                    273 ;--------------------------------------------------------
                                    274 ; absolute external ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area XABS    (ABS,XDATA)
                                    277 ;--------------------------------------------------------
                                    278 ; external initialized ram data
                                    279 ;--------------------------------------------------------
                                    280 	.area XISEG   (XDATA)
                                    281 	.area HOME    (CODE)
                                    282 	.area GSINIT0 (CODE)
                                    283 	.area GSINIT1 (CODE)
                                    284 	.area GSINIT2 (CODE)
                                    285 	.area GSINIT3 (CODE)
                                    286 	.area GSINIT4 (CODE)
                                    287 	.area GSINIT5 (CODE)
                                    288 	.area GSINIT  (CODE)
                                    289 	.area GSFINAL (CODE)
                                    290 	.area CSEG    (CODE)
                                    291 ;--------------------------------------------------------
                                    292 ; global & static initialisations
                                    293 ;--------------------------------------------------------
                                    294 	.area HOME    (CODE)
                                    295 	.area GSINIT  (CODE)
                                    296 	.area GSFINAL (CODE)
                                    297 	.area GSINIT  (CODE)
                                    298 ;--------------------------------------------------------
                                    299 ; Home
                                    300 ;--------------------------------------------------------
                                    301 	.area HOME    (CODE)
                                    302 	.area HOME    (CODE)
                                    303 ;--------------------------------------------------------
                                    304 ; code
                                    305 ;--------------------------------------------------------
                                    306 	.area CSEG    (CODE)
                                    307 ;------------------------------------------------------------
                                    308 ;Allocation info for local variables in function 'UART_Init'
                                    309 ;------------------------------------------------------------
                                    310 ;v_baudRate_u32            Allocated to registers r4 r5 r6 r7 
                                    311 ;------------------------------------------------------------
                                    312 ;	src/libs/uart.c:54: void UART_Init(uint32_t v_baudRate_u32)
                                    313 ;	-----------------------------------------
                                    314 ;	 function UART_Init
                                    315 ;	-----------------------------------------
      000000                        316 _UART_Init:
                           000007   317 	ar7 = 0x07
                           000006   318 	ar6 = 0x06
                           000005   319 	ar5 = 0x05
                           000004   320 	ar4 = 0x04
                           000003   321 	ar3 = 0x03
                           000002   322 	ar2 = 0x02
                           000001   323 	ar1 = 0x01
                           000000   324 	ar0 = 0x00
      000000 AC 82            [24]  325 	mov	r4,dpl
      000002 AD 83            [24]  326 	mov	r5,dph
      000004 AE F0            [24]  327 	mov	r6,b
      000006 FF               [12]  328 	mov	r7,a
                                    329 ;	src/libs/uart.c:56: TMOD |= 0x20; //Timer1 in Mode2.
      000007 43 89 20         [24]  330 	orl	_TMOD,#0x20
                                    331 ;	src/libs/uart.c:57: SCON=0x50;    // Asynchronous mode, 8-bit data and 1-stop bit
      00000A 75 98 50         [24]  332 	mov	_SCON,#0x50
                                    333 ;	src/libs/uart.c:58: TR1=1;        //Turn ON the timer for Baud rate generation
                                    334 ;	assignBit
      00000D D2 8E            [12]  335 	setb	_TR1
                                    336 ;	src/libs/uart.c:59: UART_SetBaudRate(v_baudRate_u32);
      00000F 8C 82            [24]  337 	mov	dpl,r4
      000011 8D 83            [24]  338 	mov	dph,r5
      000013 8E F0            [24]  339 	mov	b,r6
      000015 EF               [12]  340 	mov	a,r7
                                    341 ;	src/libs/uart.c:60: }
      000016 02r00r19         [24]  342 	ljmp	_UART_SetBaudRate
                                    343 ;------------------------------------------------------------
                                    344 ;Allocation info for local variables in function 'UART_SetBaudRate'
                                    345 ;------------------------------------------------------------
                                    346 ;v_baudRate_u32            Allocated to registers r4 r5 r6 r7 
                                    347 ;RegValue                  Allocated to registers r7 
                                    348 ;------------------------------------------------------------
                                    349 ;	src/libs/uart.c:79: void UART_SetBaudRate(uint32_t v_baudRate_u32)
                                    350 ;	-----------------------------------------
                                    351 ;	 function UART_SetBaudRate
                                    352 ;	-----------------------------------------
      000019                        353 _UART_SetBaudRate:
      000019 AC 82            [24]  354 	mov	r4,dpl
      00001B AD 83            [24]  355 	mov	r5,dph
      00001D AE F0            [24]  356 	mov	r6,b
      00001F FF               [12]  357 	mov	r7,a
                                    358 ;	src/libs/uart.c:83: if((v_baudRate_u32 >= C_MinBaudRate_U32) && (v_baudRate_u32<=C_MaxBaudRate_U32))
      000020 C3               [12]  359 	clr	c
      000021 EC               [12]  360 	mov	a,r4
      000022 94 60            [12]  361 	subb	a,#0x60
      000024 ED               [12]  362 	mov	a,r5
      000025 94 09            [12]  363 	subb	a,#0x09
      000027 EE               [12]  364 	mov	a,r6
      000028 94 00            [12]  365 	subb	a,#0x00
      00002A EF               [12]  366 	mov	a,r7
      00002B 94 00            [12]  367 	subb	a,#0x00
      00002D 40 3E            [24]  368 	jc	00102$
      00002F E4               [12]  369 	clr	a
      000030 9C               [12]  370 	subb	a,r4
      000031 74 C2            [12]  371 	mov	a,#0xc2
      000033 9D               [12]  372 	subb	a,r5
      000034 74 01            [12]  373 	mov	a,#0x01
      000036 9E               [12]  374 	subb	a,r6
      000037 E4               [12]  375 	clr	a
      000038 9F               [12]  376 	subb	a,r7
      000039 40 32            [24]  377 	jc	00102$
                                    378 ;	src/libs/uart.c:87: RegValue = M_GetBaudRateGeneratorValue(v_baudRate_u32);
      00003B 8C*00            [24]  379 	mov	__mullong_PARM_2,r4
      00003D 8D*01            [24]  380 	mov	(__mullong_PARM_2 + 1),r5
      00003F 8E*02            [24]  381 	mov	(__mullong_PARM_2 + 2),r6
      000041 8F*03            [24]  382 	mov	(__mullong_PARM_2 + 3),r7
      000043 90 01 80         [24]  383 	mov	dptr,#0x0180
      000046 E4               [12]  384 	clr	a
      000047 F5 F0            [12]  385 	mov	b,a
      000049 12r00r00         [24]  386 	lcall	__mullong
      00004C 85 82*00         [24]  387 	mov	__divulong_PARM_2,dpl
      00004F 85 83*01         [24]  388 	mov	(__divulong_PARM_2 + 1),dph
      000052 85 F0*02         [24]  389 	mov	(__divulong_PARM_2 + 2),b
      000055 F5*03            [12]  390 	mov	(__divulong_PARM_2 + 3),a
      000057 90 C0 00         [24]  391 	mov	dptr,#0xc000
      00005A 75 F0 A8         [24]  392 	mov	b,#0xa8
      00005D E4               [12]  393 	clr	a
      00005E 12r00r00         [24]  394 	lcall	__divulong
      000061 AC 82            [24]  395 	mov	r4,dpl
      000063 AD 83            [24]  396 	mov	r5,dph
      000065 AE F0            [24]  397 	mov	r6,b
      000067 C3               [12]  398 	clr	c
      000068 E4               [12]  399 	clr	a
      000069 9C               [12]  400 	subb	a,r4
      00006A FF               [12]  401 	mov	r7,a
      00006B 80 02            [24]  402 	sjmp	00103$
      00006D                        403 00102$:
                                    404 ;	src/libs/uart.c:92: RegValue = M_GetBaudRateGeneratorValue(9600);
      00006D 7F 5D            [12]  405 	mov	r7,#0x5d
      00006F                        406 00103$:
                                    407 ;	src/libs/uart.c:95: TH1 = RegValue; 
      00006F 8F 8D            [24]  408 	mov	_TH1,r7
                                    409 ;	src/libs/uart.c:96: }
      000071 22               [24]  410 	ret
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'UART_RxChar'
                                    413 ;------------------------------------------------------------
                                    414 ;	src/libs/uart.c:111: char UART_RxChar(void)
                                    415 ;	-----------------------------------------
                                    416 ;	 function UART_RxChar
                                    417 ;	-----------------------------------------
      000072                        418 _UART_RxChar:
                                    419 ;	src/libs/uart.c:113: while(RI==0);      // Wait till the data is received
      000072                        420 00101$:
                                    421 ;	src/libs/uart.c:114: RI=0;             // Clear Receive Interrupt Flag for next cycle
                                    422 ;	assignBit
      000072 10 98 02         [24]  423 	jbc	_RI,00114$
      000075 80 FB            [24]  424 	sjmp	00101$
      000077                        425 00114$:
                                    426 ;	src/libs/uart.c:116: return(SBUF);      // return the received char
      000077 85 99 82         [24]  427 	mov	dpl,_SBUF
                                    428 ;	src/libs/uart.c:117: }
      00007A 22               [24]  429 	ret
                                    430 ;------------------------------------------------------------
                                    431 ;Allocation info for local variables in function 'UART_TxChar'
                                    432 ;------------------------------------------------------------
                                    433 ;v_uartData_u8             Allocated to registers 
                                    434 ;------------------------------------------------------------
                                    435 ;	src/libs/uart.c:134: void UART_TxChar(char v_uartData_u8)
                                    436 ;	-----------------------------------------
                                    437 ;	 function UART_TxChar
                                    438 ;	-----------------------------------------
      00007B                        439 _UART_TxChar:
      00007B 85 82 99         [24]  440 	mov	_SBUF,dpl
                                    441 ;	src/libs/uart.c:137: while(TI==0);       // Wait till the data is trasmitted
      00007E                        442 00101$:
                                    443 ;	src/libs/uart.c:138: TI=0;                //Clear the Tx flag for next cycle.
                                    444 ;	assignBit
      00007E 10 99 02         [24]  445 	jbc	_TI,00114$
      000081 80 FB            [24]  446 	sjmp	00101$
      000083                        447 00114$:
                                    448 ;	src/libs/uart.c:139: }
      000083 22               [24]  449 	ret
                                    450 ;------------------------------------------------------------
                                    451 ;Allocation info for local variables in function 'UART_TxString'
                                    452 ;------------------------------------------------------------
                                    453 ;ptr_string                Allocated to registers 
                                    454 ;------------------------------------------------------------
                                    455 ;	src/libs/uart.c:158: void UART_TxString(char *ptr_string)
                                    456 ;	-----------------------------------------
                                    457 ;	 function UART_TxString
                                    458 ;	-----------------------------------------
      000084                        459 _UART_TxString:
      000084 AD 82            [24]  460 	mov	r5,dpl
      000086 AE 83            [24]  461 	mov	r6,dph
      000088 AF F0            [24]  462 	mov	r7,b
                                    463 ;	src/libs/uart.c:160: while(*ptr_string)
      00008A                        464 00101$:
      00008A 8D 82            [24]  465 	mov	dpl,r5
      00008C 8E 83            [24]  466 	mov	dph,r6
      00008E 8F F0            [24]  467 	mov	b,r7
      000090 12r00r00         [24]  468 	lcall	__gptrget
      000093 FC               [12]  469 	mov	r4,a
      000094 60 18            [24]  470 	jz	00104$
                                    471 ;	src/libs/uart.c:161: UART_TxChar(*ptr_string++);// Loop through the string and transmit char by char
      000096 8C 82            [24]  472 	mov	dpl,r4
      000098 0D               [12]  473 	inc	r5
      000099 BD 00 01         [24]  474 	cjne	r5,#0x00,00116$
      00009C 0E               [12]  475 	inc	r6
      00009D                        476 00116$:
      00009D C0 07            [24]  477 	push	ar7
      00009F C0 06            [24]  478 	push	ar6
      0000A1 C0 05            [24]  479 	push	ar5
      0000A3 12r00r7B         [24]  480 	lcall	_UART_TxChar
      0000A6 D0 05            [24]  481 	pop	ar5
      0000A8 D0 06            [24]  482 	pop	ar6
      0000AA D0 07            [24]  483 	pop	ar7
      0000AC 80 DC            [24]  484 	sjmp	00101$
      0000AE                        485 00104$:
                                    486 ;	src/libs/uart.c:162: }
      0000AE 22               [24]  487 	ret
                                    488 ;------------------------------------------------------------
                                    489 ;Allocation info for local variables in function 'UART_RxString'
                                    490 ;------------------------------------------------------------
                                    491 ;ptr_string                Allocated to registers r5 r6 r7 
                                    492 ;ch                        Allocated to registers r3 
                                    493 ;len                       Allocated to registers r4 
                                    494 ;------------------------------------------------------------
                                    495 ;	src/libs/uart.c:187: uint8_t UART_RxString(char *ptr_string)
                                    496 ;	-----------------------------------------
                                    497 ;	 function UART_RxString
                                    498 ;	-----------------------------------------
      0000AF                        499 _UART_RxString:
      0000AF AD 82            [24]  500 	mov	r5,dpl
      0000B1 AE 83            [24]  501 	mov	r6,dph
      0000B3 AF F0            [24]  502 	mov	r7,b
                                    503 ;	src/libs/uart.c:190: uint8_t len = 0;
      0000B5 7C 00            [12]  504 	mov	r4,#0x00
                                    505 ;	src/libs/uart.c:191: while(1)
      0000B7                        506 00110$:
                                    507 ;	src/libs/uart.c:193: ch=UART_RxChar();    //Receive a char
      0000B7 C0 07            [24]  508 	push	ar7
      0000B9 C0 06            [24]  509 	push	ar6
      0000BB C0 05            [24]  510 	push	ar5
      0000BD C0 04            [24]  511 	push	ar4
      0000BF 12r00r72         [24]  512 	lcall	_UART_RxChar
                                    513 ;	src/libs/uart.c:194: UART_TxChar(ch);     //Echo back the received char
      0000C2 AB 82            [24]  514 	mov  r3,dpl
      0000C4 C0 03            [24]  515 	push	ar3
      0000C6 12r00r7B         [24]  516 	lcall	_UART_TxChar
      0000C9 D0 03            [24]  517 	pop	ar3
      0000CB D0 04            [24]  518 	pop	ar4
      0000CD D0 05            [24]  519 	pop	ar5
      0000CF D0 06            [24]  520 	pop	ar6
      0000D1 D0 07            [24]  521 	pop	ar7
                                    522 ;	src/libs/uart.c:196: if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
      0000D3 BB 0D 02         [24]  523 	cjne	r3,#0x0d,00130$
      0000D6 80 03            [24]  524 	sjmp	00105$
      0000D8                        525 00130$:
      0000D8 BB 0A 14         [24]  526 	cjne	r3,#0x0a,00106$
      0000DB                        527 00105$:
                                    528 ;	src/libs/uart.c:198: ptr_string[len]=0;           //and break the loop
      0000DB EC               [12]  529 	mov	a,r4
      0000DC 2D               [12]  530 	add	a,r5
      0000DD F8               [12]  531 	mov	r0,a
      0000DE E4               [12]  532 	clr	a
      0000DF 3E               [12]  533 	addc	a,r6
      0000E0 F9               [12]  534 	mov	r1,a
      0000E1 8F 02            [24]  535 	mov	ar2,r7
      0000E3 88 82            [24]  536 	mov	dpl,r0
      0000E5 89 83            [24]  537 	mov	dph,r1
      0000E7 8A F0            [24]  538 	mov	b,r2
      0000E9 E4               [12]  539 	clr	a
      0000EA 12r00r00         [24]  540 	lcall	__gptrput
                                    541 ;	src/libs/uart.c:199: break;                  
      0000ED 80 1E            [24]  542 	sjmp	00111$
      0000EF                        543 00106$:
                                    544 ;	src/libs/uart.c:201: else if((ch=='\b') && (len!=0))
      0000EF BB 08 06         [24]  545 	cjne	r3,#0x08,00102$
      0000F2 EC               [12]  546 	mov	a,r4
      0000F3 60 03            [24]  547 	jz	00102$
                                    548 ;	src/libs/uart.c:203: len--;    //If backspace is pressed then decrement the index to remove the old char
      0000F5 1C               [12]  549 	dec	r4
      0000F6 80 BF            [24]  550 	sjmp	00110$
      0000F8                        551 00102$:
                                    552 ;	src/libs/uart.c:207: ptr_string[len]=ch; //copy the char into string and increment the index
      0000F8 EC               [12]  553 	mov	a,r4
      0000F9 2D               [12]  554 	add	a,r5
      0000FA F8               [12]  555 	mov	r0,a
      0000FB E4               [12]  556 	clr	a
      0000FC 3E               [12]  557 	addc	a,r6
      0000FD F9               [12]  558 	mov	r1,a
      0000FE 8F 02            [24]  559 	mov	ar2,r7
      000100 88 82            [24]  560 	mov	dpl,r0
      000102 89 83            [24]  561 	mov	dph,r1
      000104 8A F0            [24]  562 	mov	b,r2
      000106 EB               [12]  563 	mov	a,r3
      000107 12r00r00         [24]  564 	lcall	__gptrput
                                    565 ;	src/libs/uart.c:208: len++;
      00010A 0C               [12]  566 	inc	r4
      00010B 80 AA            [24]  567 	sjmp	00110$
      00010D                        568 00111$:
                                    569 ;	src/libs/uart.c:211: return len;   
      00010D 8C 82            [24]  570 	mov	dpl,r4
                                    571 ;	src/libs/uart.c:212: }
      00010F 22               [24]  572 	ret
                                    573 ;------------------------------------------------------------
                                    574 ;Allocation info for local variables in function 'UART_TxNumber'
                                    575 ;------------------------------------------------------------
                                    576 ;v_number_u32              Allocated with name '_UART_TxNumber_PARM_2'
                                    577 ;v_numOfDigitsToTransmit_u8 Allocated with name '_UART_TxNumber_PARM_3'
                                    578 ;v_numericSystem_u8        Allocated with name '_UART_TxNumber_v_numericSystem_u8_65536_28'
                                    579 ;i                         Allocated with name '_UART_TxNumber_i_65536_29'
                                    580 ;a                         Allocated with name '_UART_TxNumber_a_65536_29'
                                    581 ;sloc0                     Allocated with name '_UART_TxNumber_sloc0_1_0'
                                    582 ;------------------------------------------------------------
                                    583 ;	src/libs/uart.c:249: void UART_TxNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
                                    584 ;	-----------------------------------------
                                    585 ;	 function UART_TxNumber
                                    586 ;	-----------------------------------------
      000110                        587 _UART_TxNumber:
      000110 85 82*05         [24]  588 	mov	_UART_TxNumber_v_numericSystem_u8_65536_28,dpl
                                    589 ;	src/libs/uart.c:253: if(C_BINARY_U8 == v_numericSystem_u8)
      000113 74 02            [12]  590 	mov	a,#0x02
      000115 B5*05 4B         [24]  591 	cjne	a,_UART_TxNumber_v_numericSystem_u8_65536_28,00120$
                                    592 ;	src/libs/uart.c:255: while(v_numOfDigitsToTransmit_u8!=0)
      000118                        593 00101$:
      000118 E5*04            [12]  594 	mov	a,_UART_TxNumber_PARM_3
      00011A 70 01            [24]  595 	jnz	00194$
      00011C 22               [24]  596 	ret
      00011D                        597 00194$:
                                    598 ;	src/libs/uart.c:259: i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
      00011D E5*04            [12]  599 	mov	a,_UART_TxNumber_PARM_3
      00011F 14               [12]  600 	dec	a
      000120 FE               [12]  601 	mov	r6,a
      000121 8E F0            [24]  602 	mov	b,r6
      000123 05 F0            [12]  603 	inc	b
      000125 7C 01            [12]  604 	mov	r4,#0x01
      000127 7D 00            [12]  605 	mov	r5,#0x00
      000129 80 06            [24]  606 	sjmp	00196$
      00012B                        607 00195$:
      00012B EC               [12]  608 	mov	a,r4
      00012C 2C               [12]  609 	add	a,r4
      00012D FC               [12]  610 	mov	r4,a
      00012E ED               [12]  611 	mov	a,r5
      00012F 33               [12]  612 	rlc	a
      000130 FD               [12]  613 	mov	r5,a
      000131                        614 00196$:
      000131 D5 F0 F7         [24]  615 	djnz	b,00195$
      000134 ED               [12]  616 	mov	a,r5
      000135 33               [12]  617 	rlc	a
      000136 95 E0            [12]  618 	subb	a,acc
      000138 FB               [12]  619 	mov	r3,a
      000139 FA               [12]  620 	mov	r2,a
      00013A E5*00            [12]  621 	mov	a,_UART_TxNumber_PARM_2
      00013C 52 04            [12]  622 	anl	ar4,a
      00013E E5*01            [12]  623 	mov	a,(_UART_TxNumber_PARM_2 + 1)
      000140 52 05            [12]  624 	anl	ar5,a
      000142 E5*02            [12]  625 	mov	a,(_UART_TxNumber_PARM_2 + 2)
      000144 52 03            [12]  626 	anl	ar3,a
      000146 E5*03            [12]  627 	mov	a,(_UART_TxNumber_PARM_2 + 3)
      000148 52 02            [12]  628 	anl	ar2,a
      00014A EC               [12]  629 	mov	a,r4
      00014B 4D               [12]  630 	orl	a,r5
      00014C 4B               [12]  631 	orl	a,r3
      00014D 4A               [12]  632 	orl	a,r2
      00014E B4 01 00         [24]  633 	cjne	a,#0x01,00197$
      000151                        634 00197$:
                                    635 ;	src/libs/uart.c:260: UART_TxChar(util_Dec2Ascii(i));
      000151 B3               [12]  636 	cpl	c
      000152 E4               [12]  637 	clr	a
      000153 33               [12]  638 	rlc	a
      000154 24 30            [12]  639 	add	a,#0x30
      000156 F5 82            [12]  640 	mov	dpl,a
      000158 C0 06            [24]  641 	push	ar6
      00015A 12r00r7B         [24]  642 	lcall	_UART_TxChar
      00015D D0 06            [24]  643 	pop	ar6
                                    644 ;	src/libs/uart.c:261: v_numOfDigitsToTransmit_u8--;
      00015F 8E*04            [24]  645 	mov	_UART_TxNumber_PARM_3,r6
      000161 80 B5            [24]  646 	sjmp	00101$
      000163                        647 00120$:
                                    648 ;	src/libs/uart.c:264: else if(v_number_u32==0)
      000163 E5*00            [12]  649 	mov	a,_UART_TxNumber_PARM_2
      000165 45*01            [12]  650 	orl	a,(_UART_TxNumber_PARM_2 + 1)
      000167 45*02            [12]  651 	orl	a,(_UART_TxNumber_PARM_2 + 2)
      000169 45*03            [12]  652 	orl	a,(_UART_TxNumber_PARM_2 + 3)
                                    653 ;	src/libs/uart.c:267: for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
      00016B 70 1B            [24]  654 	jnz	00143$
      00016D FE               [12]  655 	mov	r6,a
      00016E                        656 00124$:
      00016E C3               [12]  657 	clr	c
      00016F EE               [12]  658 	mov	a,r6
      000170 95*04            [12]  659 	subb	a,_UART_TxNumber_PARM_3
      000172 40 01            [24]  660 	jc	00200$
      000174 22               [24]  661 	ret
      000175                        662 00200$:
      000175 BE 0A 00         [24]  663 	cjne	r6,#0x0a,00201$
      000178                        664 00201$:
      000178 40 01            [24]  665 	jc	00202$
      00017A 22               [24]  666 	ret
      00017B                        667 00202$:
                                    668 ;	src/libs/uart.c:268: UART_TxChar('0');
      00017B 75 82 30         [24]  669 	mov	dpl,#0x30
      00017E C0 06            [24]  670 	push	ar6
      000180 12r00r7B         [24]  671 	lcall	_UART_TxChar
      000183 D0 06            [24]  672 	pop	ar6
                                    673 ;	src/libs/uart.c:267: for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
      000185 0E               [12]  674 	inc	r6
                                    675 ;	src/libs/uart.c:272: for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
      000186 80 E6            [24]  676 	sjmp	00124$
      000188                        677 00143$:
      000188 74 FF            [12]  678 	mov	a,#0xff
      00018A B5*04 04         [24]  679 	cjne	a,_UART_TxNumber_PARM_3,00203$
      00018D 74 01            [12]  680 	mov	a,#0x01
      00018F 80 01            [24]  681 	sjmp	00204$
      000191                        682 00203$:
      000191 E4               [12]  683 	clr	a
      000192                        684 00204$:
      000192 F5*11            [12]  685 	mov	_UART_TxNumber_sloc0_1_0,a
      000194 C3               [12]  686 	clr	c
      000195 74 0A            [12]  687 	mov	a,#0x0a
      000197 95*04            [12]  688 	subb	a,_UART_TxNumber_PARM_3
      000199 E4               [12]  689 	clr	a
      00019A 33               [12]  690 	rlc	a
      00019B FD               [12]  691 	mov	r5,a
      00019C 75*06 00         [24]  692 	mov	_UART_TxNumber_i_65536_29,#0x00
      00019F                        693 00127$:
      00019F C3               [12]  694 	clr	c
      0001A0 E5*06            [12]  695 	mov	a,_UART_TxNumber_i_65536_29
      0001A2 95*04            [12]  696 	subb	a,_UART_TxNumber_PARM_3
      0001A4 50 66            [24]  697 	jnc	00146$
                                    698 ;	src/libs/uart.c:276: if(v_number_u32!=0)
      0001A6 E5*00            [12]  699 	mov	a,_UART_TxNumber_PARM_2
      0001A8 45*01            [12]  700 	orl	a,(_UART_TxNumber_PARM_2 + 1)
      0001AA 45*02            [12]  701 	orl	a,(_UART_TxNumber_PARM_2 + 2)
      0001AC 45*03            [12]  702 	orl	a,(_UART_TxNumber_PARM_2 + 3)
      0001AE 60 4A            [24]  703 	jz	00110$
                                    704 ;	src/libs/uart.c:284: a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
      0001B0 C0 05            [24]  705 	push	ar5
      0001B2 E5*06            [12]  706 	mov	a,_UART_TxNumber_i_65536_29
      0001B4 24r07            [12]  707 	add	a,#_UART_TxNumber_a_65536_29
      0001B6 F9               [12]  708 	mov	r1,a
      0001B7 85*05*00         [24]  709 	mov	__divulong_PARM_2,_UART_TxNumber_v_numericSystem_u8_65536_28
      0001BA 75*01 00         [24]  710 	mov	(__divulong_PARM_2 + 1),#0x00
      0001BD 75*02 00         [24]  711 	mov	(__divulong_PARM_2 + 2),#0x00
      0001C0 75*03 00         [24]  712 	mov	(__divulong_PARM_2 + 3),#0x00
      0001C3 85*00 82         [24]  713 	mov	dpl,_UART_TxNumber_PARM_2
      0001C6 85*01 83         [24]  714 	mov	dph,(_UART_TxNumber_PARM_2 + 1)
      0001C9 85*02 F0         [24]  715 	mov	b,(_UART_TxNumber_PARM_2 + 2)
      0001CC E5*03            [12]  716 	mov	a,(_UART_TxNumber_PARM_2 + 3)
      0001CE C0 05            [24]  717 	push	ar5
      0001D0 C0 01            [24]  718 	push	ar1
      0001D2 12r00r00         [24]  719 	lcall	__divulong
      0001D5 AA 82            [24]  720 	mov	r2,dpl
      0001D7 AB 83            [24]  721 	mov	r3,dph
      0001D9 AC F0            [24]  722 	mov	r4,b
      0001DB FF               [12]  723 	mov	r7,a
      0001DC D0 01            [24]  724 	pop	ar1
      0001DE D0 05            [24]  725 	pop	ar5
      0001E0 8A 05            [24]  726 	mov	ar5,r2
      0001E2 85*05 F0         [24]  727 	mov	b,_UART_TxNumber_v_numericSystem_u8_65536_28
      0001E5 ED               [12]  728 	mov	a,r5
      0001E6 A4               [48]  729 	mul	ab
      0001E7 FD               [12]  730 	mov	r5,a
      0001E8 E5*00            [12]  731 	mov	a,_UART_TxNumber_PARM_2
      0001EA FE               [12]  732 	mov	r6,a
      0001EB C3               [12]  733 	clr	c
      0001EC 9D               [12]  734 	subb	a,r5
      0001ED F7               [12]  735 	mov	@r1,a
                                    736 ;	src/libs/uart.c:285: v_number_u32=v_number_u32/v_numericSystem_u8;
      0001EE 8A*00            [24]  737 	mov	_UART_TxNumber_PARM_2,r2
      0001F0 8B*01            [24]  738 	mov	(_UART_TxNumber_PARM_2 + 1),r3
      0001F2 8C*02            [24]  739 	mov	(_UART_TxNumber_PARM_2 + 2),r4
      0001F4 8F*03            [24]  740 	mov	(_UART_TxNumber_PARM_2 + 3),r7
      0001F6 D0 05            [24]  741 	pop	ar5
      0001F8 80 0E            [24]  742 	sjmp	00128$
      0001FA                        743 00110$:
                                    744 ;	src/libs/uart.c:287: else if( (v_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
      0001FA E5*11            [12]  745 	mov	a,_UART_TxNumber_sloc0_1_0
      0001FC 70 0E            [24]  746 	jnz	00146$
                                    747 ;	src/libs/uart.c:288: (v_numOfDigitsToTransmit_u8 > C_MaxDigitsToTransmit_U8))
      0001FE ED               [12]  748 	mov	a,r5
      0001FF 70 0B            [24]  749 	jnz	00146$
                                    750 ;	src/libs/uart.c:299: a[i]=0;
      000201 E5*06            [12]  751 	mov	a,_UART_TxNumber_i_65536_29
      000203 24r07            [12]  752 	add	a,#_UART_TxNumber_a_65536_29
      000205 F8               [12]  753 	mov	r0,a
      000206 76 00            [12]  754 	mov	@r0,#0x00
      000208                        755 00128$:
                                    756 ;	src/libs/uart.c:272: for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
      000208 05*06            [12]  757 	inc	_UART_TxNumber_i_65536_29
                                    758 ;	src/libs/uart.c:303: while(i)
      00020A 80 93            [24]  759 	sjmp	00127$
      00020C                        760 00146$:
      00020C AF*06            [24]  761 	mov	r7,_UART_TxNumber_i_65536_29
      00020E                        762 00113$:
      00020E EF               [12]  763 	mov	a,r7
      00020F 60 30            [24]  764 	jz	00129$
                                    765 ;	src/libs/uart.c:306: UART_TxChar(util_Hex2Ascii(a[i-1]));
      000211 8F 06            [24]  766 	mov	ar6,r7
      000213 EE               [12]  767 	mov	a,r6
      000214 14               [12]  768 	dec	a
      000215 24r07            [12]  769 	add	a,#_UART_TxNumber_a_65536_29
      000217 F9               [12]  770 	mov	r1,a
      000218 E7               [12]  771 	mov	a,@r1
      000219 24 F6            [12]  772 	add	a,#0xff - 0x09
      00021B 50 0D            [24]  773 	jnc	00131$
      00021D EE               [12]  774 	mov	a,r6
      00021E 14               [12]  775 	dec	a
      00021F 24r07            [12]  776 	add	a,#_UART_TxNumber_a_65536_29
      000221 F9               [12]  777 	mov	r1,a
      000222 87 05            [24]  778 	mov	ar5,@r1
      000224 74 37            [12]  779 	mov	a,#0x37
      000226 2D               [12]  780 	add	a,r5
      000227 FD               [12]  781 	mov	r5,a
      000228 80 0B            [24]  782 	sjmp	00132$
      00022A                        783 00131$:
      00022A EE               [12]  784 	mov	a,r6
      00022B 14               [12]  785 	dec	a
      00022C 24r07            [12]  786 	add	a,#_UART_TxNumber_a_65536_29
      00022E F9               [12]  787 	mov	r1,a
      00022F 87 06            [24]  788 	mov	ar6,@r1
      000231 74 30            [12]  789 	mov	a,#0x30
      000233 2E               [12]  790 	add	a,r6
      000234 FD               [12]  791 	mov	r5,a
      000235                        792 00132$:
      000235 8D 82            [24]  793 	mov	dpl,r5
      000237 C0 07            [24]  794 	push	ar7
      000239 12r00r7B         [24]  795 	lcall	_UART_TxChar
      00023C D0 07            [24]  796 	pop	ar7
                                    797 ;	src/libs/uart.c:307: i--;
      00023E 1F               [12]  798 	dec	r7
      00023F 80 CD            [24]  799 	sjmp	00113$
      000241                        800 00129$:
                                    801 ;	src/libs/uart.c:312: }
      000241 22               [24]  802 	ret
                                    803 ;------------------------------------------------------------
                                    804 ;Allocation info for local variables in function 'UART_Printf'
                                    805 ;------------------------------------------------------------
                                    806 ;argList                   Allocated to stack - _bp -5
                                    807 ;ptr                       Allocated to stack - _bp +2
                                    808 ;argp                      Allocated to stack - _bp +5
                                    809 ;v_num_s16                 Allocated to registers r6 r7 
                                    810 ;v_num_s32                 Allocated to registers r4 r5 r6 r7 
                                    811 ;v_num_u16                 Allocated to registers r6 r7 
                                    812 ;v_num_u32                 Allocated to registers 
                                    813 ;str                       Allocated to registers r5 r6 r7 
                                    814 ;ch                        Allocated to registers r3 
                                    815 ;v_numOfDigitsToTransmit_u8 Allocated to stack - _bp +1
                                    816 ;------------------------------------------------------------
                                    817 ;	src/libs/uart.c:401: void UART_Printf(const char *argList, ...)
                                    818 ;	-----------------------------------------
                                    819 ;	 function UART_Printf
                                    820 ;	-----------------------------------------
      000242                        821 _UART_Printf:
      000242 C0*00            [24]  822 	push	_bp
      000244 E5 81            [12]  823 	mov	a,sp
      000246 F5*00            [12]  824 	mov	_bp,a
      000248 24 05            [12]  825 	add	a,#0x05
      00024A F5 81            [12]  826 	mov	sp,a
                                    827 ;	src/libs/uart.c:417: va_start(argp, argList);
      00024C E5*00            [12]  828 	mov	a,_bp
      00024E 24 FB            [12]  829 	add	a,#0xfb
      000250 FF               [12]  830 	mov	r7,a
      000251 E5*00            [12]  831 	mov	a,_bp
      000253 24 05            [12]  832 	add	a,#0x05
      000255 F8               [12]  833 	mov	r0,a
      000256 A6 07            [24]  834 	mov	@r0,ar7
                                    835 ;	src/libs/uart.c:420: for(ptr = argList; *ptr != '\0'; ptr++)
      000258 E5*00            [12]  836 	mov	a,_bp
      00025A 24 FB            [12]  837 	add	a,#0xfb
      00025C F8               [12]  838 	mov	r0,a
      00025D A9*00            [24]  839 	mov	r1,_bp
      00025F 09               [12]  840 	inc	r1
      000260 09               [12]  841 	inc	r1
      000261 E6               [12]  842 	mov	a,@r0
      000262 F7               [12]  843 	mov	@r1,a
      000263 08               [12]  844 	inc	r0
      000264 09               [12]  845 	inc	r1
      000265 E6               [12]  846 	mov	a,@r0
      000266 F7               [12]  847 	mov	@r1,a
      000267 08               [12]  848 	inc	r0
      000268 09               [12]  849 	inc	r1
      000269 E6               [12]  850 	mov	a,@r0
      00026A F7               [12]  851 	mov	@r1,a
      00026B                        852 00138$:
      00026B A8*00            [24]  853 	mov	r0,_bp
      00026D 08               [12]  854 	inc	r0
      00026E 08               [12]  855 	inc	r0
      00026F 86 82            [24]  856 	mov	dpl,@r0
      000271 08               [12]  857 	inc	r0
      000272 86 83            [24]  858 	mov	dph,@r0
      000274 08               [12]  859 	inc	r0
      000275 86 F0            [24]  860 	mov	b,@r0
      000277 12r00r00         [24]  861 	lcall	__gptrget
      00027A FB               [12]  862 	mov	r3,a
      00027B 70 03            [24]  863 	jnz	00278$
      00027D 02r05r92         [24]  864 	ljmp	00140$
      000280                        865 00278$:
                                    866 ;	src/libs/uart.c:423: ch= *ptr;
                                    867 ;	src/libs/uart.c:424: if(ch == '%')         /*Check for '%' as there will be format specifier after it */
      000280 BB 25 02         [24]  868 	cjne	r3,#0x25,00279$
      000283 80 03            [24]  869 	sjmp	00280$
      000285                        870 00279$:
      000285 02r05r80         [24]  871 	ljmp	00134$
      000288                        872 00280$:
                                    873 ;	src/libs/uart.c:426: ptr++;
      000288 A8*00            [24]  874 	mov	r0,_bp
      00028A 08               [12]  875 	inc	r0
      00028B 08               [12]  876 	inc	r0
      00028C 06               [12]  877 	inc	@r0
      00028D B6 00 02         [24]  878 	cjne	@r0,#0x00,00281$
      000290 08               [12]  879 	inc	r0
      000291 06               [12]  880 	inc	@r0
      000292                        881 00281$:
                                    882 ;	src/libs/uart.c:427: ch = *ptr;
      000292 A8*00            [24]  883 	mov	r0,_bp
      000294 08               [12]  884 	inc	r0
      000295 08               [12]  885 	inc	r0
      000296 86 82            [24]  886 	mov	dpl,@r0
      000298 08               [12]  887 	inc	r0
      000299 86 83            [24]  888 	mov	dph,@r0
      00029B 08               [12]  889 	inc	r0
      00029C 86 F0            [24]  890 	mov	b,@r0
      00029E 12r00r00         [24]  891 	lcall	__gptrget
      0002A1 FB               [12]  892 	mov	r3,a
                                    893 ;	src/libs/uart.c:428: if((ch>=0x30) && (ch<=0x39))
      0002A2 BB 30 00         [24]  894 	cjne	r3,#0x30,00282$
      0002A5                        895 00282$:
      0002A5 40 46            [24]  896 	jc	00106$
      0002A7 EB               [12]  897 	mov	a,r3
      0002A8 24 C6            [12]  898 	add	a,#0xff - 0x39
      0002AA 40 41            [24]  899 	jc	00106$
                                    900 ;	src/libs/uart.c:430: v_numOfDigitsToTransmit_u8 = 0;
      0002AC A8*00            [24]  901 	mov	r0,_bp
      0002AE 08               [12]  902 	inc	r0
      0002AF 76 00            [12]  903 	mov	@r0,#0x00
                                    904 ;	src/libs/uart.c:431: while((ch>=0x30) && (ch<=0x39))
      0002B1 A8*00            [24]  905 	mov	r0,_bp
      0002B3 08               [12]  906 	inc	r0
      0002B4 08               [12]  907 	inc	r0
      0002B5 86 02            [24]  908 	mov	ar2,@r0
      0002B7 08               [12]  909 	inc	r0
      0002B8 86 07            [24]  910 	mov	ar7,@r0
      0002BA 08               [12]  911 	inc	r0
      0002BB 86 06            [24]  912 	mov	ar6,@r0
      0002BD                        913 00102$:
      0002BD BB 30 00         [24]  914 	cjne	r3,#0x30,00285$
      0002C0                        915 00285$:
      0002C0 40 32            [24]  916 	jc	00169$
      0002C2 EB               [12]  917 	mov	a,r3
      0002C3 24 C6            [12]  918 	add	a,#0xff - 0x39
      0002C5 40 2D            [24]  919 	jc	00169$
                                    920 ;	src/libs/uart.c:433: v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
      0002C7 A8*00            [24]  921 	mov	r0,_bp
      0002C9 08               [12]  922 	inc	r0
      0002CA E6               [12]  923 	mov	a,@r0
      0002CB 75 F0 0A         [24]  924 	mov	b,#0x0a
      0002CE A4               [48]  925 	mul	ab
      0002CF FD               [12]  926 	mov	r5,a
      0002D0 8B 04            [24]  927 	mov	ar4,r3
      0002D2 EC               [12]  928 	mov	a,r4
      0002D3 24 D0            [12]  929 	add	a,#0xd0
      0002D5 2D               [12]  930 	add	a,r5
      0002D6 FD               [12]  931 	mov	r5,a
      0002D7 A8*00            [24]  932 	mov	r0,_bp
      0002D9 08               [12]  933 	inc	r0
      0002DA A6 05            [24]  934 	mov	@r0,ar5
                                    935 ;	src/libs/uart.c:434: ptr++;
      0002DC 0A               [12]  936 	inc	r2
      0002DD BA 00 01         [24]  937 	cjne	r2,#0x00,00288$
      0002E0 0F               [12]  938 	inc	r7
      0002E1                        939 00288$:
                                    940 ;	src/libs/uart.c:435: ch = *ptr;
      0002E1 8A 82            [24]  941 	mov	dpl,r2
      0002E3 8F 83            [24]  942 	mov	dph,r7
      0002E5 8E F0            [24]  943 	mov	b,r6
      0002E7 12r00r00         [24]  944 	lcall	__gptrget
      0002EA FB               [12]  945 	mov	r3,a
      0002EB 80 D0            [24]  946 	sjmp	00102$
      0002ED                        947 00106$:
                                    948 ;	src/libs/uart.c:440: v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
      0002ED A8*00            [24]  949 	mov	r0,_bp
      0002EF 08               [12]  950 	inc	r0
      0002F0 76 FF            [12]  951 	mov	@r0,#0xff
                                    952 ;	src/libs/uart.c:539: va_end(argp);
                                    953 ;	src/libs/uart.c:440: v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
      0002F2 80 0C            [24]  954 	sjmp	00107$
      0002F4                        955 00169$:
      0002F4 A8*00            [24]  956 	mov	r0,_bp
      0002F6 08               [12]  957 	inc	r0
      0002F7 08               [12]  958 	inc	r0
      0002F8 A6 02            [24]  959 	mov	@r0,ar2
      0002FA 08               [12]  960 	inc	r0
      0002FB A6 07            [24]  961 	mov	@r0,ar7
      0002FD 08               [12]  962 	inc	r0
      0002FE A6 06            [24]  963 	mov	@r0,ar6
      000300                        964 00107$:
                                    965 ;	src/libs/uart.c:444: switch(ch)       /* Decode the type of the argument */
      000300 BB 25 03         [24]  966 	cjne	r3,#0x25,00289$
      000303 02r05r78         [24]  967 	ljmp	00131$
      000306                        968 00289$:
      000306 BB 42 03         [24]  969 	cjne	r3,#0x42,00290$
      000309 02r05r11         [24]  970 	ljmp	00124$
      00030C                        971 00290$:
      00030C BB 43 02         [24]  972 	cjne	r3,#0x43,00291$
      00030F 80 49            [24]  973 	sjmp	00110$
      000311                        974 00291$:
      000311 BB 44 03         [24]  975 	cjne	r3,#0x44,00292$
      000314 02r03rBE         [24]  976 	ljmp	00114$
      000317                        977 00292$:
      000317 BB 46 03         [24]  978 	cjne	r3,#0x46,00293$
      00031A 02r05r85         [24]  979 	ljmp	00139$
      00031D                        980 00293$:
      00031D BB 53 03         [24]  981 	cjne	r3,#0x53,00294$
      000320 02r05r51         [24]  982 	ljmp	00130$
      000323                        983 00294$:
      000323 BB 55 03         [24]  984 	cjne	r3,#0x55,00295$
      000326 02r04r4B         [24]  985 	ljmp	00118$
      000329                        986 00295$:
      000329 BB 58 03         [24]  987 	cjne	r3,#0x58,00296$
      00032C 02r04rA9         [24]  988 	ljmp	00120$
      00032F                        989 00296$:
      00032F BB 62 03         [24]  990 	cjne	r3,#0x62,00297$
      000332 02r04rD7         [24]  991 	ljmp	00121$
      000335                        992 00297$:
      000335 BB 63 02         [24]  993 	cjne	r3,#0x63,00298$
      000338 80 20            [24]  994 	sjmp	00110$
      00033A                        995 00298$:
      00033A BB 64 02         [24]  996 	cjne	r3,#0x64,00299$
      00033D 80 34            [24]  997 	sjmp	00111$
      00033F                        998 00299$:
      00033F BB 66 03         [24]  999 	cjne	r3,#0x66,00300$
      000342 02r05r85         [24] 1000 	ljmp	00139$
      000345                       1001 00300$:
      000345 BB 73 03         [24] 1002 	cjne	r3,#0x73,00301$
      000348 02r05r51         [24] 1003 	ljmp	00130$
      00034B                       1004 00301$:
      00034B BB 75 03         [24] 1005 	cjne	r3,#0x75,00302$
      00034E 02r04r1B         [24] 1006 	ljmp	00117$
      000351                       1007 00302$:
      000351 BB 78 03         [24] 1008 	cjne	r3,#0x78,00303$
      000354 02r04r79         [24] 1009 	ljmp	00119$
      000357                       1010 00303$:
      000357 02r05r85         [24] 1011 	ljmp	00139$
                                   1012 ;	src/libs/uart.c:447: case 'c':     /* Argument type is of char, hence read char data from the argp */
      00035A                       1013 00110$:
                                   1014 ;	src/libs/uart.c:448: ch = va_arg(argp, uint8_t);
      00035A E5*00            [12] 1015 	mov	a,_bp
      00035C 24 05            [12] 1016 	add	a,#0x05
      00035E F8               [12] 1017 	mov	r0,a
      00035F E6               [12] 1018 	mov	a,@r0
      000360 14               [12] 1019 	dec	a
      000361 F9               [12] 1020 	mov	r1,a
      000362 E5*00            [12] 1021 	mov	a,_bp
      000364 24 05            [12] 1022 	add	a,#0x05
      000366 F8               [12] 1023 	mov	r0,a
      000367 A6 01            [24] 1024 	mov	@r0,ar1
      000369 87 07            [24] 1025 	mov	ar7,@r1
                                   1026 ;	src/libs/uart.c:449: UART_TxChar(ch);
      00036B 8F 82            [24] 1027 	mov	dpl,r7
      00036D 12r00r7B         [24] 1028 	lcall	_UART_TxChar
                                   1029 ;	src/libs/uart.c:450: break;
      000370 02r05r85         [24] 1030 	ljmp	00139$
                                   1031 ;	src/libs/uart.c:452: case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
      000373                       1032 00111$:
                                   1033 ;	src/libs/uart.c:453: v_num_s16 = va_arg(argp, sint16_t);
      000373 E5*00            [12] 1034 	mov	a,_bp
      000375 24 05            [12] 1035 	add	a,#0x05
      000377 F8               [12] 1036 	mov	r0,a
      000378 E6               [12] 1037 	mov	a,@r0
      000379 24 FE            [12] 1038 	add	a,#0xfe
      00037B FF               [12] 1039 	mov	r7,a
      00037C E5*00            [12] 1040 	mov	a,_bp
      00037E 24 05            [12] 1041 	add	a,#0x05
      000380 F8               [12] 1042 	mov	r0,a
      000381 A6 07            [24] 1043 	mov	@r0,ar7
      000383 8F 01            [24] 1044 	mov	ar1,r7
      000385 87 06            [24] 1045 	mov	ar6,@r1
      000387 09               [12] 1046 	inc	r1
      000388 87 07            [24] 1047 	mov	ar7,@r1
      00038A 19               [12] 1048 	dec	r1
                                   1049 ;	src/libs/uart.c:454: if(v_num_s16<0)
      00038B EF               [12] 1050 	mov	a,r7
      00038C 30 E7 15         [24] 1051 	jnb	acc.7,00113$
                                   1052 ;	src/libs/uart.c:456: v_num_s16 = -v_num_s16;
      00038F C3               [12] 1053 	clr	c
      000390 E4               [12] 1054 	clr	a
      000391 9E               [12] 1055 	subb	a,r6
      000392 FE               [12] 1056 	mov	r6,a
      000393 E4               [12] 1057 	clr	a
      000394 9F               [12] 1058 	subb	a,r7
      000395 FF               [12] 1059 	mov	r7,a
                                   1060 ;	src/libs/uart.c:457: UART_TxChar('-');
      000396 75 82 2D         [24] 1061 	mov	dpl,#0x2d
      000399 C0 07            [24] 1062 	push	ar7
      00039B C0 06            [24] 1063 	push	ar6
      00039D 12r00r7B         [24] 1064 	lcall	_UART_TxChar
      0003A0 D0 06            [24] 1065 	pop	ar6
      0003A2 D0 07            [24] 1066 	pop	ar7
      0003A4                       1067 00113$:
                                   1068 ;	src/libs/uart.c:459: UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
      0003A4 8E*00            [24] 1069 	mov	_UART_TxNumber_PARM_2,r6
      0003A6 EF               [12] 1070 	mov	a,r7
      0003A7 F5*01            [12] 1071 	mov	(_UART_TxNumber_PARM_2 + 1),a
      0003A9 33               [12] 1072 	rlc	a
      0003AA 95 E0            [12] 1073 	subb	a,acc
      0003AC F5*02            [12] 1074 	mov	(_UART_TxNumber_PARM_2 + 2),a
      0003AE F5*03            [12] 1075 	mov	(_UART_TxNumber_PARM_2 + 3),a
      0003B0 A8*00            [24] 1076 	mov	r0,_bp
      0003B2 08               [12] 1077 	inc	r0
      0003B3 86*04            [24] 1078 	mov	_UART_TxNumber_PARM_3,@r0
      0003B5 75 82 0A         [24] 1079 	mov	dpl,#0x0a
      0003B8 12r01r10         [24] 1080 	lcall	_UART_TxNumber
                                   1081 ;	src/libs/uart.c:460: break;
      0003BB 02r05r85         [24] 1082 	ljmp	00139$
                                   1083 ;	src/libs/uart.c:462: case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
      0003BE                       1084 00114$:
                                   1085 ;	src/libs/uart.c:463: v_num_s32 = va_arg(argp, sint32_t);                
      0003BE E5*00            [12] 1086 	mov	a,_bp
      0003C0 24 05            [12] 1087 	add	a,#0x05
      0003C2 F8               [12] 1088 	mov	r0,a
      0003C3 E6               [12] 1089 	mov	a,@r0
      0003C4 24 FC            [12] 1090 	add	a,#0xfc
      0003C6 FF               [12] 1091 	mov	r7,a
      0003C7 E5*00            [12] 1092 	mov	a,_bp
      0003C9 24 05            [12] 1093 	add	a,#0x05
      0003CB F8               [12] 1094 	mov	r0,a
      0003CC A6 07            [24] 1095 	mov	@r0,ar7
      0003CE 8F 01            [24] 1096 	mov	ar1,r7
      0003D0 87 04            [24] 1097 	mov	ar4,@r1
      0003D2 09               [12] 1098 	inc	r1
      0003D3 87 05            [24] 1099 	mov	ar5,@r1
      0003D5 09               [12] 1100 	inc	r1
      0003D6 87 06            [24] 1101 	mov	ar6,@r1
      0003D8 09               [12] 1102 	inc	r1
      0003D9 87 07            [24] 1103 	mov	ar7,@r1
      0003DB 19               [12] 1104 	dec	r1
      0003DC 19               [12] 1105 	dec	r1
      0003DD 19               [12] 1106 	dec	r1
                                   1107 ;	src/libs/uart.c:464: if(v_num_s32<0)
      0003DE EF               [12] 1108 	mov	a,r7
      0003DF 30 E7 23         [24] 1109 	jnb	acc.7,00116$
                                   1110 ;	src/libs/uart.c:466: v_num_s32 = -v_num_s32;
      0003E2 C3               [12] 1111 	clr	c
      0003E3 E4               [12] 1112 	clr	a
      0003E4 9C               [12] 1113 	subb	a,r4
      0003E5 FC               [12] 1114 	mov	r4,a
      0003E6 E4               [12] 1115 	clr	a
      0003E7 9D               [12] 1116 	subb	a,r5
      0003E8 FD               [12] 1117 	mov	r5,a
      0003E9 E4               [12] 1118 	clr	a
      0003EA 9E               [12] 1119 	subb	a,r6
      0003EB FE               [12] 1120 	mov	r6,a
      0003EC E4               [12] 1121 	clr	a
      0003ED 9F               [12] 1122 	subb	a,r7
      0003EE FF               [12] 1123 	mov	r7,a
                                   1124 ;	src/libs/uart.c:467: UART_TxChar('-');
      0003EF 75 82 2D         [24] 1125 	mov	dpl,#0x2d
      0003F2 C0 07            [24] 1126 	push	ar7
      0003F4 C0 06            [24] 1127 	push	ar6
      0003F6 C0 05            [24] 1128 	push	ar5
      0003F8 C0 04            [24] 1129 	push	ar4
      0003FA 12r00r7B         [24] 1130 	lcall	_UART_TxChar
      0003FD D0 04            [24] 1131 	pop	ar4
      0003FF D0 05            [24] 1132 	pop	ar5
      000401 D0 06            [24] 1133 	pop	ar6
      000403 D0 07            [24] 1134 	pop	ar7
      000405                       1135 00116$:
                                   1136 ;	src/libs/uart.c:469: UART_TxNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToTransmit_u8);            
      000405 8C*00            [24] 1137 	mov	_UART_TxNumber_PARM_2,r4
      000407 8D*01            [24] 1138 	mov	(_UART_TxNumber_PARM_2 + 1),r5
      000409 8E*02            [24] 1139 	mov	(_UART_TxNumber_PARM_2 + 2),r6
      00040B 8F*03            [24] 1140 	mov	(_UART_TxNumber_PARM_2 + 3),r7
      00040D A8*00            [24] 1141 	mov	r0,_bp
      00040F 08               [12] 1142 	inc	r0
      000410 86*04            [24] 1143 	mov	_UART_TxNumber_PARM_3,@r0
      000412 75 82 0A         [24] 1144 	mov	dpl,#0x0a
      000415 12r01r10         [24] 1145 	lcall	_UART_TxNumber
                                   1146 ;	src/libs/uart.c:470: break;    
      000418 02r05r85         [24] 1147 	ljmp	00139$
                                   1148 ;	src/libs/uart.c:472: case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
      00041B                       1149 00117$:
                                   1150 ;	src/libs/uart.c:473: v_num_u16 = va_arg(argp, uint16_t);            
      00041B E5*00            [12] 1151 	mov	a,_bp
      00041D 24 05            [12] 1152 	add	a,#0x05
      00041F F8               [12] 1153 	mov	r0,a
      000420 E6               [12] 1154 	mov	a,@r0
      000421 24 FE            [12] 1155 	add	a,#0xfe
      000423 FF               [12] 1156 	mov	r7,a
      000424 E5*00            [12] 1157 	mov	a,_bp
      000426 24 05            [12] 1158 	add	a,#0x05
      000428 F8               [12] 1159 	mov	r0,a
      000429 A6 07            [24] 1160 	mov	@r0,ar7
      00042B 8F 01            [24] 1161 	mov	ar1,r7
      00042D 87 06            [24] 1162 	mov	ar6,@r1
      00042F 09               [12] 1163 	inc	r1
      000430 87 07            [24] 1164 	mov	ar7,@r1
      000432 19               [12] 1165 	dec	r1
                                   1166 ;	src/libs/uart.c:474: UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);                
      000433 8E*00            [24] 1167 	mov	_UART_TxNumber_PARM_2,r6
      000435 8F*01            [24] 1168 	mov	(_UART_TxNumber_PARM_2 + 1),r7
      000437 75*02 00         [24] 1169 	mov	(_UART_TxNumber_PARM_2 + 2),#0x00
      00043A 75*03 00         [24] 1170 	mov	(_UART_TxNumber_PARM_2 + 3),#0x00
      00043D A8*00            [24] 1171 	mov	r0,_bp
      00043F 08               [12] 1172 	inc	r0
      000440 86*04            [24] 1173 	mov	_UART_TxNumber_PARM_3,@r0
      000442 75 82 0A         [24] 1174 	mov	dpl,#0x0a
      000445 12r01r10         [24] 1175 	lcall	_UART_TxNumber
                                   1176 ;	src/libs/uart.c:475: break;
      000448 02r05r85         [24] 1177 	ljmp	00139$
                                   1178 ;	src/libs/uart.c:477: case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
      00044B                       1179 00118$:
                                   1180 ;	src/libs/uart.c:478: v_num_u32 = va_arg(argp, uint32_t);            
      00044B E5*00            [12] 1181 	mov	a,_bp
      00044D 24 05            [12] 1182 	add	a,#0x05
      00044F F8               [12] 1183 	mov	r0,a
      000450 E6               [12] 1184 	mov	a,@r0
      000451 24 FC            [12] 1185 	add	a,#0xfc
      000453 FF               [12] 1186 	mov	r7,a
      000454 E5*00            [12] 1187 	mov	a,_bp
      000456 24 05            [12] 1188 	add	a,#0x05
      000458 F8               [12] 1189 	mov	r0,a
      000459 A6 07            [24] 1190 	mov	@r0,ar7
      00045B 8F 01            [24] 1191 	mov	ar1,r7
      00045D 87*00            [24] 1192 	mov	_UART_TxNumber_PARM_2,@r1
      00045F 09               [12] 1193 	inc	r1
      000460 87*01            [24] 1194 	mov	(_UART_TxNumber_PARM_2 + 1),@r1
      000462 09               [12] 1195 	inc	r1
      000463 87*02            [24] 1196 	mov	(_UART_TxNumber_PARM_2 + 2),@r1
      000465 09               [12] 1197 	inc	r1
      000466 87*03            [24] 1198 	mov	(_UART_TxNumber_PARM_2 + 3),@r1
      000468 19               [12] 1199 	dec	r1
      000469 19               [12] 1200 	dec	r1
      00046A 19               [12] 1201 	dec	r1
                                   1202 ;	src/libs/uart.c:479: UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);                
      00046B A8*00            [24] 1203 	mov	r0,_bp
      00046D 08               [12] 1204 	inc	r0
      00046E 86*04            [24] 1205 	mov	_UART_TxNumber_PARM_3,@r0
      000470 75 82 0A         [24] 1206 	mov	dpl,#0x0a
      000473 12r01r10         [24] 1207 	lcall	_UART_TxNumber
                                   1208 ;	src/libs/uart.c:480: break;            
      000476 02r05r85         [24] 1209 	ljmp	00139$
                                   1210 ;	src/libs/uart.c:482: case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
      000479                       1211 00119$:
                                   1212 ;	src/libs/uart.c:483: v_num_u16 = va_arg(argp, uint16_t);                
      000479 E5*00            [12] 1213 	mov	a,_bp
      00047B 24 05            [12] 1214 	add	a,#0x05
      00047D F8               [12] 1215 	mov	r0,a
      00047E E6               [12] 1216 	mov	a,@r0
      00047F 24 FE            [12] 1217 	add	a,#0xfe
      000481 FF               [12] 1218 	mov	r7,a
      000482 E5*00            [12] 1219 	mov	a,_bp
      000484 24 05            [12] 1220 	add	a,#0x05
      000486 F8               [12] 1221 	mov	r0,a
      000487 A6 07            [24] 1222 	mov	@r0,ar7
      000489 8F 01            [24] 1223 	mov	ar1,r7
      00048B 87 06            [24] 1224 	mov	ar6,@r1
      00048D 09               [12] 1225 	inc	r1
      00048E 87 07            [24] 1226 	mov	ar7,@r1
      000490 19               [12] 1227 	dec	r1
                                   1228 ;	src/libs/uart.c:484: UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);            
      000491 8E*00            [24] 1229 	mov	_UART_TxNumber_PARM_2,r6
      000493 8F*01            [24] 1230 	mov	(_UART_TxNumber_PARM_2 + 1),r7
      000495 75*02 00         [24] 1231 	mov	(_UART_TxNumber_PARM_2 + 2),#0x00
      000498 75*03 00         [24] 1232 	mov	(_UART_TxNumber_PARM_2 + 3),#0x00
      00049B A8*00            [24] 1233 	mov	r0,_bp
      00049D 08               [12] 1234 	inc	r0
      00049E 86*04            [24] 1235 	mov	_UART_TxNumber_PARM_3,@r0
      0004A0 75 82 10         [24] 1236 	mov	dpl,#0x10
      0004A3 12r01r10         [24] 1237 	lcall	_UART_TxNumber
                                   1238 ;	src/libs/uart.c:485: break;
      0004A6 02r05r85         [24] 1239 	ljmp	00139$
                                   1240 ;	src/libs/uart.c:487: case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
      0004A9                       1241 00120$:
                                   1242 ;	src/libs/uart.c:488: v_num_u32 = va_arg(argp, uint32_t);                        
      0004A9 E5*00            [12] 1243 	mov	a,_bp
      0004AB 24 05            [12] 1244 	add	a,#0x05
      0004AD F8               [12] 1245 	mov	r0,a
      0004AE E6               [12] 1246 	mov	a,@r0
      0004AF 24 FC            [12] 1247 	add	a,#0xfc
      0004B1 FF               [12] 1248 	mov	r7,a
      0004B2 E5*00            [12] 1249 	mov	a,_bp
      0004B4 24 05            [12] 1250 	add	a,#0x05
      0004B6 F8               [12] 1251 	mov	r0,a
      0004B7 A6 07            [24] 1252 	mov	@r0,ar7
      0004B9 8F 01            [24] 1253 	mov	ar1,r7
      0004BB 87*00            [24] 1254 	mov	_UART_TxNumber_PARM_2,@r1
      0004BD 09               [12] 1255 	inc	r1
      0004BE 87*01            [24] 1256 	mov	(_UART_TxNumber_PARM_2 + 1),@r1
      0004C0 09               [12] 1257 	inc	r1
      0004C1 87*02            [24] 1258 	mov	(_UART_TxNumber_PARM_2 + 2),@r1
      0004C3 09               [12] 1259 	inc	r1
      0004C4 87*03            [24] 1260 	mov	(_UART_TxNumber_PARM_2 + 3),@r1
      0004C6 19               [12] 1261 	dec	r1
      0004C7 19               [12] 1262 	dec	r1
      0004C8 19               [12] 1263 	dec	r1
                                   1264 ;	src/libs/uart.c:489: UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);                
      0004C9 A8*00            [24] 1265 	mov	r0,_bp
      0004CB 08               [12] 1266 	inc	r0
      0004CC 86*04            [24] 1267 	mov	_UART_TxNumber_PARM_3,@r0
      0004CE 75 82 10         [24] 1268 	mov	dpl,#0x10
      0004D1 12r01r10         [24] 1269 	lcall	_UART_TxNumber
                                   1270 ;	src/libs/uart.c:490: break;
      0004D4 02r05r85         [24] 1271 	ljmp	00139$
                                   1272 ;	src/libs/uart.c:493: case 'b':  /* Argument type is of binary,Read int and convert to binary */
      0004D7                       1273 00121$:
                                   1274 ;	src/libs/uart.c:494: v_num_u16 = va_arg(argp, uint16_t);        
      0004D7 E5*00            [12] 1275 	mov	a,_bp
      0004D9 24 05            [12] 1276 	add	a,#0x05
      0004DB F8               [12] 1277 	mov	r0,a
      0004DC E6               [12] 1278 	mov	a,@r0
      0004DD 24 FE            [12] 1279 	add	a,#0xfe
      0004DF FF               [12] 1280 	mov	r7,a
      0004E0 E5*00            [12] 1281 	mov	a,_bp
      0004E2 24 05            [12] 1282 	add	a,#0x05
      0004E4 F8               [12] 1283 	mov	r0,a
      0004E5 A6 07            [24] 1284 	mov	@r0,ar7
      0004E7 8F 01            [24] 1285 	mov	ar1,r7
      0004E9 87 06            [24] 1286 	mov	ar6,@r1
      0004EB 09               [12] 1287 	inc	r1
      0004EC 87 07            [24] 1288 	mov	ar7,@r1
      0004EE 19               [12] 1289 	dec	r1
                                   1290 ;	src/libs/uart.c:496: if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
      0004EF A8*00            [24] 1291 	mov	r0,_bp
      0004F1 08               [12] 1292 	inc	r0
      0004F2 B6 FF 05         [24] 1293 	cjne	@r0,#0xff,00123$
                                   1294 ;	src/libs/uart.c:497: v_numOfDigitsToTransmit_u8 = 16;
      0004F5 A8*00            [24] 1295 	mov	r0,_bp
      0004F7 08               [12] 1296 	inc	r0
      0004F8 76 10            [12] 1297 	mov	@r0,#0x10
      0004FA                       1298 00123$:
                                   1299 ;	src/libs/uart.c:499: UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);            
      0004FA 8E*00            [24] 1300 	mov	_UART_TxNumber_PARM_2,r6
      0004FC 8F*01            [24] 1301 	mov	(_UART_TxNumber_PARM_2 + 1),r7
      0004FE 75*02 00         [24] 1302 	mov	(_UART_TxNumber_PARM_2 + 2),#0x00
      000501 75*03 00         [24] 1303 	mov	(_UART_TxNumber_PARM_2 + 3),#0x00
      000504 A8*00            [24] 1304 	mov	r0,_bp
      000506 08               [12] 1305 	inc	r0
      000507 86*04            [24] 1306 	mov	_UART_TxNumber_PARM_3,@r0
      000509 75 82 02         [24] 1307 	mov	dpl,#0x02
      00050C 12r01r10         [24] 1308 	lcall	_UART_TxNumber
                                   1309 ;	src/libs/uart.c:500: break;
                                   1310 ;	src/libs/uart.c:502: case 'B':  /* Argument type is of binary,Read int and convert to binary */
      00050F 80 74            [24] 1311 	sjmp	00139$
      000511                       1312 00124$:
                                   1313 ;	src/libs/uart.c:503: v_num_u32 = va_arg(argp, uint32_t);            
      000511 E5*00            [12] 1314 	mov	a,_bp
      000513 24 05            [12] 1315 	add	a,#0x05
      000515 F8               [12] 1316 	mov	r0,a
      000516 E6               [12] 1317 	mov	a,@r0
      000517 24 FC            [12] 1318 	add	a,#0xfc
      000519 FF               [12] 1319 	mov	r7,a
      00051A E5*00            [12] 1320 	mov	a,_bp
      00051C 24 05            [12] 1321 	add	a,#0x05
      00051E F8               [12] 1322 	mov	r0,a
      00051F A6 07            [24] 1323 	mov	@r0,ar7
      000521 8F 01            [24] 1324 	mov	ar1,r7
      000523 87 04            [24] 1325 	mov	ar4,@r1
      000525 09               [12] 1326 	inc	r1
      000526 87 05            [24] 1327 	mov	ar5,@r1
      000528 09               [12] 1328 	inc	r1
      000529 87 06            [24] 1329 	mov	ar6,@r1
      00052B 09               [12] 1330 	inc	r1
      00052C 87 07            [24] 1331 	mov	ar7,@r1
      00052E 19               [12] 1332 	dec	r1
      00052F 19               [12] 1333 	dec	r1
      000530 19               [12] 1334 	dec	r1
                                   1335 ;	src/libs/uart.c:505: if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
      000531 A8*00            [24] 1336 	mov	r0,_bp
      000533 08               [12] 1337 	inc	r0
      000534 B6 FF 05         [24] 1338 	cjne	@r0,#0xff,00126$
                                   1339 ;	src/libs/uart.c:506: v_numOfDigitsToTransmit_u8 = 32;        
      000537 A8*00            [24] 1340 	mov	r0,_bp
      000539 08               [12] 1341 	inc	r0
      00053A 76 20            [12] 1342 	mov	@r0,#0x20
      00053C                       1343 00126$:
                                   1344 ;	src/libs/uart.c:508: UART_TxNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToTransmit_u8);                
      00053C 8C*00            [24] 1345 	mov	_UART_TxNumber_PARM_2,r4
      00053E 8D*01            [24] 1346 	mov	(_UART_TxNumber_PARM_2 + 1),r5
      000540 8E*02            [24] 1347 	mov	(_UART_TxNumber_PARM_2 + 2),r6
      000542 8F*03            [24] 1348 	mov	(_UART_TxNumber_PARM_2 + 3),r7
      000544 A8*00            [24] 1349 	mov	r0,_bp
      000546 08               [12] 1350 	inc	r0
      000547 86*04            [24] 1351 	mov	_UART_TxNumber_PARM_3,@r0
      000549 75 82 02         [24] 1352 	mov	dpl,#0x02
      00054C 12r01r10         [24] 1353 	lcall	_UART_TxNumber
                                   1354 ;	src/libs/uart.c:509: break;
                                   1355 ;	src/libs/uart.c:522: case 's': /* Argument type is of string, hence get the pointer to sting passed */
      00054F 80 34            [24] 1356 	sjmp	00139$
      000551                       1357 00130$:
                                   1358 ;	src/libs/uart.c:523: str = va_arg(argp, char *);
      000551 E5*00            [12] 1359 	mov	a,_bp
      000553 24 05            [12] 1360 	add	a,#0x05
      000555 F8               [12] 1361 	mov	r0,a
      000556 E6               [12] 1362 	mov	a,@r0
      000557 24 FD            [12] 1363 	add	a,#0xfd
      000559 FF               [12] 1364 	mov	r7,a
      00055A E5*00            [12] 1365 	mov	a,_bp
      00055C 24 05            [12] 1366 	add	a,#0x05
      00055E F8               [12] 1367 	mov	r0,a
      00055F A6 07            [24] 1368 	mov	@r0,ar7
      000561 8F 01            [24] 1369 	mov	ar1,r7
      000563 87 05            [24] 1370 	mov	ar5,@r1
      000565 09               [12] 1371 	inc	r1
      000566 87 06            [24] 1372 	mov	ar6,@r1
      000568 09               [12] 1373 	inc	r1
      000569 87 07            [24] 1374 	mov	ar7,@r1
      00056B 19               [12] 1375 	dec	r1
      00056C 19               [12] 1376 	dec	r1
                                   1377 ;	src/libs/uart.c:524: UART_TxString(str);            
      00056D 8D 82            [24] 1378 	mov	dpl,r5
      00056F 8E 83            [24] 1379 	mov	dph,r6
      000571 8F F0            [24] 1380 	mov	b,r7
      000573 12r00r84         [24] 1381 	lcall	_UART_TxString
                                   1382 ;	src/libs/uart.c:525: break;
                                   1383 ;	src/libs/uart.c:527: case '%':
      000576 80 0D            [24] 1384 	sjmp	00139$
      000578                       1385 00131$:
                                   1386 ;	src/libs/uart.c:528: UART_TxChar('%');
      000578 75 82 25         [24] 1387 	mov	dpl,#0x25
      00057B 12r00r7B         [24] 1388 	lcall	_UART_TxChar
                                   1389 ;	src/libs/uart.c:530: }
      00057E 80 05            [24] 1390 	sjmp	00139$
      000580                       1391 00134$:
                                   1392 ;	src/libs/uart.c:535: UART_TxChar(ch);
      000580 8B 82            [24] 1393 	mov	dpl,r3
      000582 12r00r7B         [24] 1394 	lcall	_UART_TxChar
      000585                       1395 00139$:
                                   1396 ;	src/libs/uart.c:420: for(ptr = argList; *ptr != '\0'; ptr++)
      000585 A8*00            [24] 1397 	mov	r0,_bp
      000587 08               [12] 1398 	inc	r0
      000588 08               [12] 1399 	inc	r0
      000589 06               [12] 1400 	inc	@r0
      00058A B6 00 02         [24] 1401 	cjne	@r0,#0x00,00310$
      00058D 08               [12] 1402 	inc	r0
      00058E 06               [12] 1403 	inc	@r0
      00058F                       1404 00310$:
      00058F 02r02r6B         [24] 1405 	ljmp	00138$
                                   1406 ;	src/libs/uart.c:539: va_end(argp);
      000592                       1407 00140$:
                                   1408 ;	src/libs/uart.c:540: }
      000592 85*00 81         [24] 1409 	mov	sp,_bp
      000595 D0*00            [24] 1410 	pop	_bp
      000597 22               [24] 1411 	ret
                                   1412 	.area CSEG    (CODE)
                                   1413 	.area CONST   (CODE)
                                   1414 	.area XINIT   (CODE)
                                   1415 	.area CABS    (ABS,CODE)
