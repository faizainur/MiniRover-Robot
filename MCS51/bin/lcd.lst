                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcd
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _pinSetup_PARM_2
                                     12 	.globl _LCDSetup_PARM_3
                                     13 	.globl _LCDSetup_PARM_2
                                     14 	.globl _DELAY_us
                                     15 	.globl _EN_P3
                                     16 	.globl _RW_P3
                                     17 	.globl _RS_P3
                                     18 	.globl _EN_P2
                                     19 	.globl _RW_P2
                                     20 	.globl _RS_P2
                                     21 	.globl _EN_P1
                                     22 	.globl _RW_P1
                                     23 	.globl _RS_P1
                                     24 	.globl _EN_P0
                                     25 	.globl _RW_P0
                                     26 	.globl _RS_P0
                                     27 	.globl _P_NC
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _FL
                                     35 	.globl _P
                                     36 	.globl _PS
                                     37 	.globl _PT1
                                     38 	.globl _PX1
                                     39 	.globl _PT0
                                     40 	.globl _PX0
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD
                                     48 	.globl _RXD
                                     49 	.globl _P3_7
                                     50 	.globl _P3_6
                                     51 	.globl _P3_5
                                     52 	.globl _P3_4
                                     53 	.globl _P3_3
                                     54 	.globl _P3_2
                                     55 	.globl _P3_1
                                     56 	.globl _P3_0
                                     57 	.globl _EA
                                     58 	.globl _ES
                                     59 	.globl _ET1
                                     60 	.globl _EX1
                                     61 	.globl _ET0
                                     62 	.globl _EX0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _SM0
                                     72 	.globl _SM1
                                     73 	.globl _SM2
                                     74 	.globl _REN
                                     75 	.globl _TB8
                                     76 	.globl _RB8
                                     77 	.globl _TI
                                     78 	.globl _RI
                                     79 	.globl _P1_7
                                     80 	.globl _P1_6
                                     81 	.globl _P1_5
                                     82 	.globl _P1_4
                                     83 	.globl _P1_3
                                     84 	.globl _P1_2
                                     85 	.globl _P1_1
                                     86 	.globl _P1_0
                                     87 	.globl _TF1
                                     88 	.globl _TR1
                                     89 	.globl _TF0
                                     90 	.globl _TR0
                                     91 	.globl _IE1
                                     92 	.globl _IT1
                                     93 	.globl _IE0
                                     94 	.globl _IT0
                                     95 	.globl _P0_7
                                     96 	.globl _P0_6
                                     97 	.globl _P0_5
                                     98 	.globl _P0_4
                                     99 	.globl _P0_3
                                    100 	.globl _P0_2
                                    101 	.globl _P0_1
                                    102 	.globl _P0_0
                                    103 	.globl _B
                                    104 	.globl _A
                                    105 	.globl _ACC
                                    106 	.globl _PSW
                                    107 	.globl _IP
                                    108 	.globl _P3
                                    109 	.globl _IE
                                    110 	.globl _P2
                                    111 	.globl _SBUF
                                    112 	.globl _SCON
                                    113 	.globl _P1
                                    114 	.globl _TH1
                                    115 	.globl _TH0
                                    116 	.globl _TL1
                                    117 	.globl _TL0
                                    118 	.globl _TMOD
                                    119 	.globl _TCON
                                    120 	.globl _PCON
                                    121 	.globl _DPH
                                    122 	.globl _DPL
                                    123 	.globl _SP
                                    124 	.globl _P0
                                    125 	.globl _printString_PARM_2
                                    126 	.globl ___config
                                    127 	.globl _LCDLineAddress
                                    128 	.globl _LCDSetup
                                    129 	.globl _pinSetup
                                    130 	.globl _LCDInit
                                    131 	.globl _LCDCmdWrite
                                    132 	.globl _LCDDataWrite
                                    133 	.globl _printString
                                    134 ;--------------------------------------------------------
                                    135 ; special function registers
                                    136 ;--------------------------------------------------------
                                    137 	.area RSEG    (ABS,DATA)
      000000                        138 	.org 0x0000
                           000080   139 _P0	=	0x0080
                           000081   140 _SP	=	0x0081
                           000082   141 _DPL	=	0x0082
                           000083   142 _DPH	=	0x0083
                           000087   143 _PCON	=	0x0087
                           000088   144 _TCON	=	0x0088
                           000089   145 _TMOD	=	0x0089
                           00008A   146 _TL0	=	0x008a
                           00008B   147 _TL1	=	0x008b
                           00008C   148 _TH0	=	0x008c
                           00008D   149 _TH1	=	0x008d
                           000090   150 _P1	=	0x0090
                           000098   151 _SCON	=	0x0098
                           000099   152 _SBUF	=	0x0099
                           0000A0   153 _P2	=	0x00a0
                           0000A8   154 _IE	=	0x00a8
                           0000B0   155 _P3	=	0x00b0
                           0000B8   156 _IP	=	0x00b8
                           0000D0   157 _PSW	=	0x00d0
                           0000E0   158 _ACC	=	0x00e0
                           0000E0   159 _A	=	0x00e0
                           0000F0   160 _B	=	0x00f0
                                    161 ;--------------------------------------------------------
                                    162 ; special function bits
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
                           000080   166 _P0_0	=	0x0080
                           000081   167 _P0_1	=	0x0081
                           000082   168 _P0_2	=	0x0082
                           000083   169 _P0_3	=	0x0083
                           000084   170 _P0_4	=	0x0084
                           000085   171 _P0_5	=	0x0085
                           000086   172 _P0_6	=	0x0086
                           000087   173 _P0_7	=	0x0087
                           000088   174 _IT0	=	0x0088
                           000089   175 _IE0	=	0x0089
                           00008A   176 _IT1	=	0x008a
                           00008B   177 _IE1	=	0x008b
                           00008C   178 _TR0	=	0x008c
                           00008D   179 _TF0	=	0x008d
                           00008E   180 _TR1	=	0x008e
                           00008F   181 _TF1	=	0x008f
                           000090   182 _P1_0	=	0x0090
                           000091   183 _P1_1	=	0x0091
                           000092   184 _P1_2	=	0x0092
                           000093   185 _P1_3	=	0x0093
                           000094   186 _P1_4	=	0x0094
                           000095   187 _P1_5	=	0x0095
                           000096   188 _P1_6	=	0x0096
                           000097   189 _P1_7	=	0x0097
                           000098   190 _RI	=	0x0098
                           000099   191 _TI	=	0x0099
                           00009A   192 _RB8	=	0x009a
                           00009B   193 _TB8	=	0x009b
                           00009C   194 _REN	=	0x009c
                           00009D   195 _SM2	=	0x009d
                           00009E   196 _SM1	=	0x009e
                           00009F   197 _SM0	=	0x009f
                           0000A0   198 _P2_0	=	0x00a0
                           0000A1   199 _P2_1	=	0x00a1
                           0000A2   200 _P2_2	=	0x00a2
                           0000A3   201 _P2_3	=	0x00a3
                           0000A4   202 _P2_4	=	0x00a4
                           0000A5   203 _P2_5	=	0x00a5
                           0000A6   204 _P2_6	=	0x00a6
                           0000A7   205 _P2_7	=	0x00a7
                           0000A8   206 _EX0	=	0x00a8
                           0000A9   207 _ET0	=	0x00a9
                           0000AA   208 _EX1	=	0x00aa
                           0000AB   209 _ET1	=	0x00ab
                           0000AC   210 _ES	=	0x00ac
                           0000AF   211 _EA	=	0x00af
                           0000B0   212 _P3_0	=	0x00b0
                           0000B1   213 _P3_1	=	0x00b1
                           0000B2   214 _P3_2	=	0x00b2
                           0000B3   215 _P3_3	=	0x00b3
                           0000B4   216 _P3_4	=	0x00b4
                           0000B5   217 _P3_5	=	0x00b5
                           0000B6   218 _P3_6	=	0x00b6
                           0000B7   219 _P3_7	=	0x00b7
                           0000B0   220 _RXD	=	0x00b0
                           0000B1   221 _TXD	=	0x00b1
                           0000B2   222 _INT0	=	0x00b2
                           0000B3   223 _INT1	=	0x00b3
                           0000B4   224 _T0	=	0x00b4
                           0000B5   225 _T1	=	0x00b5
                           0000B6   226 _WR	=	0x00b6
                           0000B7   227 _RD	=	0x00b7
                           0000B8   228 _PX0	=	0x00b8
                           0000B9   229 _PT0	=	0x00b9
                           0000BA   230 _PX1	=	0x00ba
                           0000BB   231 _PT1	=	0x00bb
                           0000BC   232 _PS	=	0x00bc
                           0000D0   233 _P	=	0x00d0
                           0000D1   234 _FL	=	0x00d1
                           0000D2   235 _OV	=	0x00d2
                           0000D3   236 _RS0	=	0x00d3
                           0000D4   237 _RS1	=	0x00d4
                           0000D5   238 _F0	=	0x00d5
                           0000D6   239 _AC	=	0x00d6
                           0000D7   240 _CY	=	0x00d7
                           0000FF   241 _P_NC	=	0x00ff
                           000080   242 _RS_P0	=	0x0080
                           000081   243 _RW_P0	=	0x0081
                           000082   244 _EN_P0	=	0x0082
                           000090   245 _RS_P1	=	0x0090
                           000091   246 _RW_P1	=	0x0091
                           000092   247 _EN_P1	=	0x0092
                           0000A0   248 _RS_P2	=	0x00a0
                           0000A1   249 _RW_P2	=	0x00a1
                           0000A2   250 _EN_P2	=	0x00a2
                           0000B0   251 _RS_P3	=	0x00b0
                           0000B1   252 _RW_P3	=	0x00b1
                           0000B2   253 _EN_P3	=	0x00b2
      000000                        254 _pinSetup_pin_65536_11:
      000000                        255 	.ds 1
                                    256 ;--------------------------------------------------------
                                    257 ; overlayable register banks
                                    258 ;--------------------------------------------------------
                                    259 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        260 	.ds 8
                                    261 ;--------------------------------------------------------
                                    262 ; internal ram data
                                    263 ;--------------------------------------------------------
                                    264 	.area DSEG    (DATA)
      000000                        265 _LCDLineAddress::
      000000                        266 	.ds 8
      000008                        267 ___config::
      000008                        268 	.ds 3
      00000B                        269 _printString_PARM_2:
      00000B                        270 	.ds 3
                                    271 ;--------------------------------------------------------
                                    272 ; overlayable items in internal ram 
                                    273 ;--------------------------------------------------------
                                    274 	.area	OSEG    (OVR,DATA)
      000000                        275 _LCDSetup_PARM_2:
      000000                        276 	.ds 1
      000001                        277 _LCDSetup_PARM_3:
      000001                        278 	.ds 1
                                    279 	.area	OSEG    (OVR,DATA)
      000000                        280 _pinSetup_PARM_2:
      000000                        281 	.ds 1
                                    282 ;--------------------------------------------------------
                                    283 ; indirectly addressable internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area ISEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; absolute internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area IABS    (ABS,DATA)
                                    290 	.area IABS    (ABS,DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; bit data
                                    293 ;--------------------------------------------------------
                                    294 	.area BSEG    (BIT)
                                    295 ;--------------------------------------------------------
                                    296 ; paged external ram data
                                    297 ;--------------------------------------------------------
                                    298 	.area PSEG    (PAG,XDATA)
                                    299 ;--------------------------------------------------------
                                    300 ; external ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area XSEG    (XDATA)
                                    303 ;--------------------------------------------------------
                                    304 ; absolute external ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area XABS    (ABS,XDATA)
                                    307 ;--------------------------------------------------------
                                    308 ; external initialized ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area XISEG   (XDATA)
                                    311 	.area HOME    (CODE)
                                    312 	.area GSINIT0 (CODE)
                                    313 	.area GSINIT1 (CODE)
                                    314 	.area GSINIT2 (CODE)
                                    315 	.area GSINIT3 (CODE)
                                    316 	.area GSINIT4 (CODE)
                                    317 	.area GSINIT5 (CODE)
                                    318 	.area GSINIT  (CODE)
                                    319 	.area GSFINAL (CODE)
                                    320 	.area CSEG    (CODE)
                                    321 ;--------------------------------------------------------
                                    322 ; global & static initialisations
                                    323 ;--------------------------------------------------------
                                    324 	.area HOME    (CODE)
                                    325 	.area GSINIT  (CODE)
                                    326 	.area GSFINAL (CODE)
                                    327 	.area GSINIT  (CODE)
                                    328 ;	src/libs/lcd.h:75: uint16_t LCDLineAddress[] = {0x80, 0xC0, 0x90, 0xD0};
      000000 75*00 80         [24]  329 	mov	(_LCDLineAddress + 0),#0x80
      000003 75*01 00         [24]  330 	mov	(_LCDLineAddress + 1),#0x00
      000006 75*02 C0         [24]  331 	mov	((_LCDLineAddress + 0x0002) + 0),#0xc0
      000009 75*03 00         [24]  332 	mov	((_LCDLineAddress + 0x0002) + 1),#0x00
      00000C 75*04 90         [24]  333 	mov	((_LCDLineAddress + 0x0004) + 0),#0x90
      00000F 75*05 00         [24]  334 	mov	((_LCDLineAddress + 0x0004) + 1),#0x00
      000012 75*06 D0         [24]  335 	mov	((_LCDLineAddress + 0x0006) + 0),#0xd0
      000015 75*07 00         [24]  336 	mov	((_LCDLineAddress + 0x0006) + 1),#0x00
                                    337 ;--------------------------------------------------------
                                    338 ; Home
                                    339 ;--------------------------------------------------------
                                    340 	.area HOME    (CODE)
                                    341 	.area HOME    (CODE)
                                    342 ;--------------------------------------------------------
                                    343 ; code
                                    344 ;--------------------------------------------------------
                                    345 	.area CSEG    (CODE)
                                    346 ;------------------------------------------------------------
                                    347 ;Allocation info for local variables in function 'LCDSetup'
                                    348 ;------------------------------------------------------------
                                    349 ;lcdDatabusType            Allocated with name '_LCDSetup_PARM_2'
                                    350 ;lcdBusModes               Allocated with name '_LCDSetup_PARM_3'
                                    351 ;lcdType                   Allocated to registers r7 
                                    352 ;------------------------------------------------------------
                                    353 ;	src/libs/lcd.c:5: int LCDSetup(uint8_t lcdType, uint8_t lcdDatabusType, uint8_t lcdBusModes)
                                    354 ;	-----------------------------------------
                                    355 ;	 function LCDSetup
                                    356 ;	-----------------------------------------
      000000                        357 _LCDSetup:
                           000007   358 	ar7 = 0x07
                           000006   359 	ar6 = 0x06
                           000005   360 	ar5 = 0x05
                           000004   361 	ar4 = 0x04
                           000003   362 	ar3 = 0x03
                           000002   363 	ar2 = 0x02
                           000001   364 	ar1 = 0x01
                           000000   365 	ar0 = 0x00
      000000 AF 82            [24]  366 	mov	r7,dpl
                                    367 ;	src/libs/lcd.c:7: __config.LCDType = lcdType;
      000002 8F*08            [24]  368 	mov	___config,r7
                                    369 ;	src/libs/lcd.c:8: __config.__LCDBusModes = lcdBusModes;
      000004 85*01*09         [24]  370 	mov	(___config + 0x0001),_LCDSetup_PARM_3
                                    371 ;	src/libs/lcd.c:9: __config.LCDDatabusType = lcdDatabusType;
      000007 85*00*0A         [24]  372 	mov	(___config + 0x0002),_LCDSetup_PARM_2
                                    373 ;	src/libs/lcd.c:10: return 0;
      00000A 90 00 00         [24]  374 	mov	dptr,#0x0000
                                    375 ;	src/libs/lcd.c:11: }
      00000D 22               [24]  376 	ret
                                    377 ;------------------------------------------------------------
                                    378 ;Allocation info for local variables in function 'pinSetup'
                                    379 ;------------------------------------------------------------
                                    380 ;pin                       Allocated with name '_pinSetup_pin_65536_11'
                                    381 ;modes                     Allocated with name '_pinSetup_PARM_2'
                                    382 ;------------------------------------------------------------
                                    383 ;	src/libs/lcd.c:13: void pinSetup(__sbit pin, uint8_t modes){
                                    384 ;	-----------------------------------------
                                    385 ;	 function pinSetup
                                    386 ;	-----------------------------------------
      00000E                        387 _pinSetup:
                                    388 ;	src/libs/lcd.c:15: pin = modes;
                                    389 ;	assignBit
      00000E E5*00            [12]  390 	mov	a,_pinSetup_PARM_2
      000010 24 FF            [12]  391 	add	a,#0xff
      000012 92*00            [24]  392 	mov	_pinSetup_pin_65536_11,c
                                    393 ;	src/libs/lcd.c:16: }
      000014 22               [24]  394 	ret
                                    395 ;------------------------------------------------------------
                                    396 ;Allocation info for local variables in function 'LCDInit'
                                    397 ;------------------------------------------------------------
                                    398 ;	src/libs/lcd.c:18: void LCDInit(){
                                    399 ;	-----------------------------------------
                                    400 ;	 function LCDInit
                                    401 ;	-----------------------------------------
      000015                        402 _LCDInit:
                                    403 ;	src/libs/lcd.c:20: LCDCmdWrite(RETURN_HOME);
      000015 75 82 02         [24]  404 	mov	dpl,#0x02
      000018 12r00r3D         [24]  405 	lcall	_LCDCmdWrite
                                    406 ;	src/libs/lcd.c:22: if (__config.__LCDBusModes == BUS4){
      00001B AF*09            [24]  407 	mov	r7,(___config + 0x0001)
      00001D BF 01 08         [24]  408 	cjne	r7,#0x01,00104$
                                    409 ;	src/libs/lcd.c:23: LCDCmdWrite(CMD_LCD_FOUR_BIT_MODE);
      000020 75 82 28         [24]  410 	mov	dpl,#0x28
      000023 12r00r3D         [24]  411 	lcall	_LCDCmdWrite
      000026 80 09            [24]  412 	sjmp	00105$
      000028                        413 00104$:
                                    414 ;	src/libs/lcd.c:24: } else if (__config.__LCDBusModes == BUS8){
      000028 EF               [12]  415 	mov	a,r7
      000029 70 06            [24]  416 	jnz	00105$
                                    417 ;	src/libs/lcd.c:25: LCDCmdWrite(CMD_LCD_EIGHT_BIT_MODE);
      00002B 75 82 38         [24]  418 	mov	dpl,#0x38
      00002E 12r00r3D         [24]  419 	lcall	_LCDCmdWrite
      000031                        420 00105$:
                                    421 ;	src/libs/lcd.c:28: LCDCmdWrite(DISPLAY_ON_CURSOR_BLINK_1);
      000031 75 82 0E         [24]  422 	mov	dpl,#0x0e
      000034 12r00r3D         [24]  423 	lcall	_LCDCmdWrite
                                    424 ;	src/libs/lcd.c:29: LCDCmdWrite(CLEAR_SCREEN);
      000037 75 82 01         [24]  425 	mov	dpl,#0x01
                                    426 ;	src/libs/lcd.c:31: }
      00003A 02r00r3D         [24]  427 	ljmp	_LCDCmdWrite
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 'LCDCmdWrite'
                                    430 ;------------------------------------------------------------
                                    431 ;cmd                       Allocated to registers r7 
                                    432 ;------------------------------------------------------------
                                    433 ;	src/libs/lcd.c:33: int LCDCmdWrite(char cmd){
                                    434 ;	-----------------------------------------
                                    435 ;	 function LCDCmdWrite
                                    436 ;	-----------------------------------------
      00003D                        437 _LCDCmdWrite:
      00003D AF 82            [24]  438 	mov	r7,dpl
                                    439 ;	src/libs/lcd.c:35: switch (__config.LCDDatabusType)
      00003F E5*0A            [12]  440 	mov	a,(___config + 0x0002)
      000041 FE               [12]  441 	mov	r6,a
      000042 24 FC            [12]  442 	add	a,#0xff - 0x03
      000044 50 03            [24]  443 	jnc	00123$
      000046 02r00rBB         [24]  444 	ljmp	00105$
      000049                        445 00123$:
      000049 EE               [12]  446 	mov	a,r6
      00004A 2E               [12]  447 	add	a,r6
                                    448 ;	src/libs/lcd.c:37: case DATABUS_P0:
      00004B 90r00r4F         [24]  449 	mov	dptr,#00124$
      00004E 73               [24]  450 	jmp	@a+dptr
      00004F                        451 00124$:
      00004F 80 06            [24]  452 	sjmp	00101$
      000051 80 1D            [24]  453 	sjmp	00102$
      000053 80 34            [24]  454 	sjmp	00103$
      000055 80 4B            [24]  455 	sjmp	00104$
      000057                        456 00101$:
                                    457 ;	src/libs/lcd.c:38: LcdDatabus_P0 = (cmd & 0xF0);
      000057 74 F0            [12]  458 	mov	a,#0xf0
      000059 5F               [12]  459 	anl	a,r7
      00005A F5 80            [12]  460 	mov	_P0,a
                                    461 ;	src/libs/lcd.c:39: RS_P0 = LOW;
                                    462 ;	assignBit
      00005C C2 80            [12]  463 	clr	_RS_P0
                                    464 ;	src/libs/lcd.c:40: RW_P0 = LOW;
                                    465 ;	assignBit
      00005E C2 81            [12]  466 	clr	_RW_P0
                                    467 ;	src/libs/lcd.c:41: EN_P0 = HIGH;
                                    468 ;	assignBit
      000060 D2 82            [12]  469 	setb	_EN_P0
                                    470 ;	src/libs/lcd.c:42: DELAY_us(1000);
      000062 90 03 E8         [24]  471 	mov	dptr,#0x03e8
      000065 C0 07            [24]  472 	push	ar7
      000067 12r00r00         [24]  473 	lcall	_DELAY_us
      00006A D0 07            [24]  474 	pop	ar7
                                    475 ;	src/libs/lcd.c:43: EN_P0 = LOW;
                                    476 ;	assignBit
      00006C C2 82            [12]  477 	clr	_EN_P0
                                    478 ;	src/libs/lcd.c:44: break;
                                    479 ;	src/libs/lcd.c:46: case DATABUS_P1:
      00006E 80 4F            [24]  480 	sjmp	00106$
      000070                        481 00102$:
                                    482 ;	src/libs/lcd.c:47: LcdDatabus_P1 = (cmd & 0xF0);
      000070 74 F0            [12]  483 	mov	a,#0xf0
      000072 5F               [12]  484 	anl	a,r7
      000073 F5 90            [12]  485 	mov	_P1,a
                                    486 ;	src/libs/lcd.c:48: RS_P1 = LOW;
                                    487 ;	assignBit
      000075 C2 90            [12]  488 	clr	_RS_P1
                                    489 ;	src/libs/lcd.c:49: RW_P1 = LOW;
                                    490 ;	assignBit
      000077 C2 91            [12]  491 	clr	_RW_P1
                                    492 ;	src/libs/lcd.c:50: EN_P1 = HIGH;
                                    493 ;	assignBit
      000079 D2 92            [12]  494 	setb	_EN_P1
                                    495 ;	src/libs/lcd.c:51: DELAY_us(1000);
      00007B 90 03 E8         [24]  496 	mov	dptr,#0x03e8
      00007E C0 07            [24]  497 	push	ar7
      000080 12r00r00         [24]  498 	lcall	_DELAY_us
      000083 D0 07            [24]  499 	pop	ar7
                                    500 ;	src/libs/lcd.c:52: EN_P1 = LOW;
                                    501 ;	assignBit
      000085 C2 92            [12]  502 	clr	_EN_P1
                                    503 ;	src/libs/lcd.c:53: break;
                                    504 ;	src/libs/lcd.c:55: case DATABUS_P2:
      000087 80 36            [24]  505 	sjmp	00106$
      000089                        506 00103$:
                                    507 ;	src/libs/lcd.c:56: LcdDatabus_P2 = (cmd & 0xF0);
      000089 74 F0            [12]  508 	mov	a,#0xf0
      00008B 5F               [12]  509 	anl	a,r7
      00008C F5 A0            [12]  510 	mov	_P2,a
                                    511 ;	src/libs/lcd.c:57: RS_P2 = LOW;
                                    512 ;	assignBit
      00008E C2 A0            [12]  513 	clr	_RS_P2
                                    514 ;	src/libs/lcd.c:58: RW_P2 = LOW;
                                    515 ;	assignBit
      000090 C2 A1            [12]  516 	clr	_RW_P2
                                    517 ;	src/libs/lcd.c:59: EN_P2 = HIGH;
                                    518 ;	assignBit
      000092 D2 A2            [12]  519 	setb	_EN_P2
                                    520 ;	src/libs/lcd.c:60: DELAY_us(1000);
      000094 90 03 E8         [24]  521 	mov	dptr,#0x03e8
      000097 C0 07            [24]  522 	push	ar7
      000099 12r00r00         [24]  523 	lcall	_DELAY_us
      00009C D0 07            [24]  524 	pop	ar7
                                    525 ;	src/libs/lcd.c:61: EN_P2 = LOW;
                                    526 ;	assignBit
      00009E C2 A2            [12]  527 	clr	_EN_P2
                                    528 ;	src/libs/lcd.c:62: break;
                                    529 ;	src/libs/lcd.c:64: case DATABUS_P3:
      0000A0 80 1D            [24]  530 	sjmp	00106$
      0000A2                        531 00104$:
                                    532 ;	src/libs/lcd.c:65: LcdDatabus_P3 = (cmd & 0xF0);
      0000A2 74 F0            [12]  533 	mov	a,#0xf0
      0000A4 5F               [12]  534 	anl	a,r7
      0000A5 F5 B0            [12]  535 	mov	_P3,a
                                    536 ;	src/libs/lcd.c:66: RS_P3 = LOW;
                                    537 ;	assignBit
      0000A7 C2 B0            [12]  538 	clr	_RS_P3
                                    539 ;	src/libs/lcd.c:67: RW_P3 = LOW;
                                    540 ;	assignBit
      0000A9 C2 B1            [12]  541 	clr	_RW_P3
                                    542 ;	src/libs/lcd.c:68: EN_P3 = HIGH;
                                    543 ;	assignBit
      0000AB D2 B2            [12]  544 	setb	_EN_P3
                                    545 ;	src/libs/lcd.c:69: DELAY_us(1000);
      0000AD 90 03 E8         [24]  546 	mov	dptr,#0x03e8
      0000B0 C0 07            [24]  547 	push	ar7
      0000B2 12r00r00         [24]  548 	lcall	_DELAY_us
      0000B5 D0 07            [24]  549 	pop	ar7
                                    550 ;	src/libs/lcd.c:70: EN_P3 = LOW;
                                    551 ;	assignBit
      0000B7 C2 B2            [12]  552 	clr	_EN_P3
                                    553 ;	src/libs/lcd.c:71: break;
                                    554 ;	src/libs/lcd.c:73: default:
      0000B9 80 04            [24]  555 	sjmp	00106$
      0000BB                        556 00105$:
                                    557 ;	src/libs/lcd.c:74: return -1;
      0000BB 90 FF FF         [24]  558 	mov	dptr,#0xffff
      0000BE 22               [24]  559 	ret
                                    560 ;	src/libs/lcd.c:75: }
      0000BF                        561 00106$:
                                    562 ;	src/libs/lcd.c:77: DELAY_us(10000);
      0000BF 90 27 10         [24]  563 	mov	dptr,#0x2710
      0000C2 C0 07            [24]  564 	push	ar7
      0000C4 12r00r00         [24]  565 	lcall	_DELAY_us
      0000C7 D0 07            [24]  566 	pop	ar7
                                    567 ;	src/libs/lcd.c:79: switch (__config.LCDDatabusType)
      0000C9 E5*0A            [12]  568 	mov	a,(___config + 0x0002)
      0000CB FE               [12]  569 	mov	r6,a
      0000CC 24 FC            [12]  570 	add	a,#0xff - 0x03
      0000CE 50 03            [24]  571 	jnc	00125$
      0000D0 02r01r4F         [24]  572 	ljmp	00111$
      0000D3                        573 00125$:
      0000D3 EE               [12]  574 	mov	a,r6
      0000D4 2E               [12]  575 	add	a,r6
                                    576 ;	src/libs/lcd.c:81: case DATABUS_P0:
      0000D5 90r00rD9         [24]  577 	mov	dptr,#00126$
      0000D8 73               [24]  578 	jmp	@a+dptr
      0000D9                        579 00126$:
      0000D9 80 06            [24]  580 	sjmp	00107$
      0000DB 80 20            [24]  581 	sjmp	00108$
      0000DD 80 3A            [24]  582 	sjmp	00109$
      0000DF 80 54            [24]  583 	sjmp	00110$
      0000E1                        584 00107$:
                                    585 ;	src/libs/lcd.c:82: LcdDatabus_P0 = ((cmd<<4) & 0xF0);
      0000E1 8F 06            [24]  586 	mov	ar6,r7
      0000E3 EE               [12]  587 	mov	a,r6
      0000E4 C4               [12]  588 	swap	a
      0000E5 54 F0            [12]  589 	anl	a,#0xf0
      0000E7 FE               [12]  590 	mov	r6,a
      0000E8 74 F0            [12]  591 	mov	a,#0xf0
      0000EA 5E               [12]  592 	anl	a,r6
      0000EB F5 80            [12]  593 	mov	_P0,a
                                    594 ;	src/libs/lcd.c:83: RS_P0 = LOW;
                                    595 ;	assignBit
      0000ED C2 80            [12]  596 	clr	_RS_P0
                                    597 ;	src/libs/lcd.c:84: RW_P0 = LOW;
                                    598 ;	assignBit
      0000EF C2 81            [12]  599 	clr	_RW_P0
                                    600 ;	src/libs/lcd.c:85: EN_P0 = HIGH;
                                    601 ;	assignBit
      0000F1 D2 82            [12]  602 	setb	_EN_P0
                                    603 ;	src/libs/lcd.c:86: DELAY_us(1000);
      0000F3 90 03 E8         [24]  604 	mov	dptr,#0x03e8
      0000F6 12r00r00         [24]  605 	lcall	_DELAY_us
                                    606 ;	src/libs/lcd.c:87: EN_P0 = LOW;
                                    607 ;	assignBit
      0000F9 C2 82            [12]  608 	clr	_EN_P0
                                    609 ;	src/libs/lcd.c:88: break;
                                    610 ;	src/libs/lcd.c:89: case DATABUS_P1:
      0000FB 80 56            [24]  611 	sjmp	00112$
      0000FD                        612 00108$:
                                    613 ;	src/libs/lcd.c:90: LcdDatabus_P1 = ((cmd<<4) & 0xF0);
      0000FD 8F 06            [24]  614 	mov	ar6,r7
      0000FF EE               [12]  615 	mov	a,r6
      000100 C4               [12]  616 	swap	a
      000101 54 F0            [12]  617 	anl	a,#0xf0
      000103 FE               [12]  618 	mov	r6,a
      000104 74 F0            [12]  619 	mov	a,#0xf0
      000106 5E               [12]  620 	anl	a,r6
      000107 F5 90            [12]  621 	mov	_P1,a
                                    622 ;	src/libs/lcd.c:91: RS_P1 = LOW;
                                    623 ;	assignBit
      000109 C2 90            [12]  624 	clr	_RS_P1
                                    625 ;	src/libs/lcd.c:92: RW_P1 = LOW;
                                    626 ;	assignBit
      00010B C2 91            [12]  627 	clr	_RW_P1
                                    628 ;	src/libs/lcd.c:93: EN_P1 = HIGH;
                                    629 ;	assignBit
      00010D D2 92            [12]  630 	setb	_EN_P1
                                    631 ;	src/libs/lcd.c:94: DELAY_us(1000);
      00010F 90 03 E8         [24]  632 	mov	dptr,#0x03e8
      000112 12r00r00         [24]  633 	lcall	_DELAY_us
                                    634 ;	src/libs/lcd.c:95: EN_P1 = LOW;
                                    635 ;	assignBit
      000115 C2 92            [12]  636 	clr	_EN_P1
                                    637 ;	src/libs/lcd.c:96: break;
                                    638 ;	src/libs/lcd.c:97: case DATABUS_P2:
      000117 80 3A            [24]  639 	sjmp	00112$
      000119                        640 00109$:
                                    641 ;	src/libs/lcd.c:98: LcdDatabus_P2 = ((cmd<<4) & 0xF0);
      000119 8F 06            [24]  642 	mov	ar6,r7
      00011B EE               [12]  643 	mov	a,r6
      00011C C4               [12]  644 	swap	a
      00011D 54 F0            [12]  645 	anl	a,#0xf0
      00011F FE               [12]  646 	mov	r6,a
      000120 74 F0            [12]  647 	mov	a,#0xf0
      000122 5E               [12]  648 	anl	a,r6
      000123 F5 A0            [12]  649 	mov	_P2,a
                                    650 ;	src/libs/lcd.c:99: RS_P2 = LOW;
                                    651 ;	assignBit
      000125 C2 A0            [12]  652 	clr	_RS_P2
                                    653 ;	src/libs/lcd.c:100: RW_P2 = LOW;
                                    654 ;	assignBit
      000127 C2 A1            [12]  655 	clr	_RW_P2
                                    656 ;	src/libs/lcd.c:101: EN_P2 = HIGH;
                                    657 ;	assignBit
      000129 D2 A2            [12]  658 	setb	_EN_P2
                                    659 ;	src/libs/lcd.c:102: DELAY_us(1000);
      00012B 90 03 E8         [24]  660 	mov	dptr,#0x03e8
      00012E 12r00r00         [24]  661 	lcall	_DELAY_us
                                    662 ;	src/libs/lcd.c:103: EN_P2 = LOW;
                                    663 ;	assignBit
      000131 C2 A2            [12]  664 	clr	_EN_P2
                                    665 ;	src/libs/lcd.c:104: break;
                                    666 ;	src/libs/lcd.c:105: case DATABUS_P3:
      000133 80 1E            [24]  667 	sjmp	00112$
      000135                        668 00110$:
                                    669 ;	src/libs/lcd.c:106: LcdDatabus_P3 = ((cmd<<4) & 0xF0);
      000135 EF               [12]  670 	mov	a,r7
      000136 C4               [12]  671 	swap	a
      000137 54 F0            [12]  672 	anl	a,#0xf0
      000139 FF               [12]  673 	mov	r7,a
      00013A 74 F0            [12]  674 	mov	a,#0xf0
      00013C 5F               [12]  675 	anl	a,r7
      00013D F5 B0            [12]  676 	mov	_P3,a
                                    677 ;	src/libs/lcd.c:107: RS_P3 = LOW;
                                    678 ;	assignBit
      00013F C2 B0            [12]  679 	clr	_RS_P3
                                    680 ;	src/libs/lcd.c:108: RW_P3 = LOW;
                                    681 ;	assignBit
      000141 C2 B1            [12]  682 	clr	_RW_P3
                                    683 ;	src/libs/lcd.c:109: EN_P3 = HIGH;
                                    684 ;	assignBit
      000143 D2 B2            [12]  685 	setb	_EN_P3
                                    686 ;	src/libs/lcd.c:110: DELAY_us(1000);
      000145 90 03 E8         [24]  687 	mov	dptr,#0x03e8
      000148 12r00r00         [24]  688 	lcall	_DELAY_us
                                    689 ;	src/libs/lcd.c:111: EN_P3 = LOW;
                                    690 ;	assignBit
      00014B C2 B2            [12]  691 	clr	_EN_P3
                                    692 ;	src/libs/lcd.c:112: break;
                                    693 ;	src/libs/lcd.c:113: default:
      00014D 80 04            [24]  694 	sjmp	00112$
      00014F                        695 00111$:
                                    696 ;	src/libs/lcd.c:114: return -1;
      00014F 90 FF FF         [24]  697 	mov	dptr,#0xffff
                                    698 ;	src/libs/lcd.c:115: }
      000152 22               [24]  699 	ret
      000153                        700 00112$:
                                    701 ;	src/libs/lcd.c:117: DELAY_us(10000);
      000153 90 27 10         [24]  702 	mov	dptr,#0x2710
      000156 12r00r00         [24]  703 	lcall	_DELAY_us
                                    704 ;	src/libs/lcd.c:118: return 0;
      000159 90 00 00         [24]  705 	mov	dptr,#0x0000
                                    706 ;	src/libs/lcd.c:119: }
      00015C 22               [24]  707 	ret
                                    708 ;------------------------------------------------------------
                                    709 ;Allocation info for local variables in function 'LCDDataWrite'
                                    710 ;------------------------------------------------------------
                                    711 ;data                      Allocated to registers r7 
                                    712 ;------------------------------------------------------------
                                    713 ;	src/libs/lcd.c:121: int LCDDataWrite(char data){
                                    714 ;	-----------------------------------------
                                    715 ;	 function LCDDataWrite
                                    716 ;	-----------------------------------------
      00015D                        717 _LCDDataWrite:
      00015D AF 82            [24]  718 	mov	r7,dpl
                                    719 ;	src/libs/lcd.c:123: switch (__config.LCDDatabusType)
      00015F E5*0A            [12]  720 	mov	a,(___config + 0x0002)
      000161 FE               [12]  721 	mov	r6,a
      000162 24 FC            [12]  722 	add	a,#0xff - 0x03
      000164 50 03            [24]  723 	jnc	00123$
      000166 02r01rDB         [24]  724 	ljmp	00105$
      000169                        725 00123$:
      000169 EE               [12]  726 	mov	a,r6
      00016A 2E               [12]  727 	add	a,r6
                                    728 ;	src/libs/lcd.c:125: case DATABUS_P0:
      00016B 90r01r6F         [24]  729 	mov	dptr,#00124$
      00016E 73               [24]  730 	jmp	@a+dptr
      00016F                        731 00124$:
      00016F 80 06            [24]  732 	sjmp	00101$
      000171 80 1D            [24]  733 	sjmp	00102$
      000173 80 34            [24]  734 	sjmp	00103$
      000175 80 4B            [24]  735 	sjmp	00104$
      000177                        736 00101$:
                                    737 ;	src/libs/lcd.c:126: LcdDatabus_P0 = (data & 0xF0);
      000177 74 F0            [12]  738 	mov	a,#0xf0
      000179 5F               [12]  739 	anl	a,r7
      00017A F5 80            [12]  740 	mov	_P0,a
                                    741 ;	src/libs/lcd.c:127: RS_P0 = HIGH;
                                    742 ;	assignBit
      00017C D2 80            [12]  743 	setb	_RS_P0
                                    744 ;	src/libs/lcd.c:128: RW_P0 = LOW;
                                    745 ;	assignBit
      00017E C2 81            [12]  746 	clr	_RW_P0
                                    747 ;	src/libs/lcd.c:129: EN_P0 = HIGH;
                                    748 ;	assignBit
      000180 D2 82            [12]  749 	setb	_EN_P0
                                    750 ;	src/libs/lcd.c:130: DELAY_us(1000);
      000182 90 03 E8         [24]  751 	mov	dptr,#0x03e8
      000185 C0 07            [24]  752 	push	ar7
      000187 12r00r00         [24]  753 	lcall	_DELAY_us
      00018A D0 07            [24]  754 	pop	ar7
                                    755 ;	src/libs/lcd.c:131: EN_P0 = LOW;
                                    756 ;	assignBit
      00018C C2 82            [12]  757 	clr	_EN_P0
                                    758 ;	src/libs/lcd.c:132: break;
                                    759 ;	src/libs/lcd.c:134: case DATABUS_P1:
      00018E 80 4F            [24]  760 	sjmp	00106$
      000190                        761 00102$:
                                    762 ;	src/libs/lcd.c:135: LcdDatabus_P1 = (data & 0xF0);
      000190 74 F0            [12]  763 	mov	a,#0xf0
      000192 5F               [12]  764 	anl	a,r7
      000193 F5 90            [12]  765 	mov	_P1,a
                                    766 ;	src/libs/lcd.c:136: RS_P1 = HIGH;
                                    767 ;	assignBit
      000195 D2 90            [12]  768 	setb	_RS_P1
                                    769 ;	src/libs/lcd.c:137: RW_P1 = LOW;
                                    770 ;	assignBit
      000197 C2 91            [12]  771 	clr	_RW_P1
                                    772 ;	src/libs/lcd.c:138: EN_P1 = HIGH;
                                    773 ;	assignBit
      000199 D2 92            [12]  774 	setb	_EN_P1
                                    775 ;	src/libs/lcd.c:139: DELAY_us(1000);
      00019B 90 03 E8         [24]  776 	mov	dptr,#0x03e8
      00019E C0 07            [24]  777 	push	ar7
      0001A0 12r00r00         [24]  778 	lcall	_DELAY_us
      0001A3 D0 07            [24]  779 	pop	ar7
                                    780 ;	src/libs/lcd.c:140: EN_P1 = LOW;
                                    781 ;	assignBit
      0001A5 C2 92            [12]  782 	clr	_EN_P1
                                    783 ;	src/libs/lcd.c:141: break;
                                    784 ;	src/libs/lcd.c:143: case DATABUS_P2:
      0001A7 80 36            [24]  785 	sjmp	00106$
      0001A9                        786 00103$:
                                    787 ;	src/libs/lcd.c:144: LcdDatabus_P2 = (data & 0xF0);
      0001A9 74 F0            [12]  788 	mov	a,#0xf0
      0001AB 5F               [12]  789 	anl	a,r7
      0001AC F5 A0            [12]  790 	mov	_P2,a
                                    791 ;	src/libs/lcd.c:145: RS_P2 = HIGH;
                                    792 ;	assignBit
      0001AE D2 A0            [12]  793 	setb	_RS_P2
                                    794 ;	src/libs/lcd.c:146: RW_P2 = LOW;
                                    795 ;	assignBit
      0001B0 C2 A1            [12]  796 	clr	_RW_P2
                                    797 ;	src/libs/lcd.c:147: EN_P2 = HIGH;
                                    798 ;	assignBit
      0001B2 D2 A2            [12]  799 	setb	_EN_P2
                                    800 ;	src/libs/lcd.c:148: DELAY_us(1000);
      0001B4 90 03 E8         [24]  801 	mov	dptr,#0x03e8
      0001B7 C0 07            [24]  802 	push	ar7
      0001B9 12r00r00         [24]  803 	lcall	_DELAY_us
      0001BC D0 07            [24]  804 	pop	ar7
                                    805 ;	src/libs/lcd.c:149: EN_P2 = LOW;
                                    806 ;	assignBit
      0001BE C2 A2            [12]  807 	clr	_EN_P2
                                    808 ;	src/libs/lcd.c:150: break;
                                    809 ;	src/libs/lcd.c:152: case DATABUS_P3:
      0001C0 80 1D            [24]  810 	sjmp	00106$
      0001C2                        811 00104$:
                                    812 ;	src/libs/lcd.c:153: LcdDatabus_P3 = (data & 0xF0);
      0001C2 74 F0            [12]  813 	mov	a,#0xf0
      0001C4 5F               [12]  814 	anl	a,r7
      0001C5 F5 B0            [12]  815 	mov	_P3,a
                                    816 ;	src/libs/lcd.c:154: RS_P3 = HIGH;
                                    817 ;	assignBit
      0001C7 D2 B0            [12]  818 	setb	_RS_P3
                                    819 ;	src/libs/lcd.c:155: RW_P3 = LOW;
                                    820 ;	assignBit
      0001C9 C2 B1            [12]  821 	clr	_RW_P3
                                    822 ;	src/libs/lcd.c:156: EN_P3 = HIGH;
                                    823 ;	assignBit
      0001CB D2 B2            [12]  824 	setb	_EN_P3
                                    825 ;	src/libs/lcd.c:157: DELAY_us(1000);
      0001CD 90 03 E8         [24]  826 	mov	dptr,#0x03e8
      0001D0 C0 07            [24]  827 	push	ar7
      0001D2 12r00r00         [24]  828 	lcall	_DELAY_us
      0001D5 D0 07            [24]  829 	pop	ar7
                                    830 ;	src/libs/lcd.c:158: EN_P3 = LOW;
                                    831 ;	assignBit
      0001D7 C2 B2            [12]  832 	clr	_EN_P3
                                    833 ;	src/libs/lcd.c:159: break;
                                    834 ;	src/libs/lcd.c:161: default:
      0001D9 80 04            [24]  835 	sjmp	00106$
      0001DB                        836 00105$:
                                    837 ;	src/libs/lcd.c:162: return -1;
      0001DB 90 FF FF         [24]  838 	mov	dptr,#0xffff
      0001DE 22               [24]  839 	ret
                                    840 ;	src/libs/lcd.c:163: }
      0001DF                        841 00106$:
                                    842 ;	src/libs/lcd.c:165: DELAY_us(10000);
      0001DF 90 27 10         [24]  843 	mov	dptr,#0x2710
      0001E2 C0 07            [24]  844 	push	ar7
      0001E4 12r00r00         [24]  845 	lcall	_DELAY_us
      0001E7 D0 07            [24]  846 	pop	ar7
                                    847 ;	src/libs/lcd.c:167: switch (__config.LCDDatabusType)
      0001E9 E5*0A            [12]  848 	mov	a,(___config + 0x0002)
      0001EB FE               [12]  849 	mov	r6,a
      0001EC 24 FC            [12]  850 	add	a,#0xff - 0x03
      0001EE 50 03            [24]  851 	jnc	00125$
      0001F0 02r02r6F         [24]  852 	ljmp	00111$
      0001F3                        853 00125$:
      0001F3 EE               [12]  854 	mov	a,r6
      0001F4 2E               [12]  855 	add	a,r6
                                    856 ;	src/libs/lcd.c:169: case DATABUS_P0:
      0001F5 90r01rF9         [24]  857 	mov	dptr,#00126$
      0001F8 73               [24]  858 	jmp	@a+dptr
      0001F9                        859 00126$:
      0001F9 80 06            [24]  860 	sjmp	00107$
      0001FB 80 20            [24]  861 	sjmp	00108$
      0001FD 80 3A            [24]  862 	sjmp	00109$
      0001FF 80 54            [24]  863 	sjmp	00110$
      000201                        864 00107$:
                                    865 ;	src/libs/lcd.c:170: LcdDatabus_P0 = ((data<<4) & 0xF0);
      000201 8F 06            [24]  866 	mov	ar6,r7
      000203 EE               [12]  867 	mov	a,r6
      000204 C4               [12]  868 	swap	a
      000205 54 F0            [12]  869 	anl	a,#0xf0
      000207 FE               [12]  870 	mov	r6,a
      000208 74 F0            [12]  871 	mov	a,#0xf0
      00020A 5E               [12]  872 	anl	a,r6
      00020B F5 80            [12]  873 	mov	_P0,a
                                    874 ;	src/libs/lcd.c:171: RS_P0 = HIGH;
                                    875 ;	assignBit
      00020D D2 80            [12]  876 	setb	_RS_P0
                                    877 ;	src/libs/lcd.c:172: RW_P0 = LOW;
                                    878 ;	assignBit
      00020F C2 81            [12]  879 	clr	_RW_P0
                                    880 ;	src/libs/lcd.c:173: EN_P0 = HIGH;
                                    881 ;	assignBit
      000211 D2 82            [12]  882 	setb	_EN_P0
                                    883 ;	src/libs/lcd.c:174: DELAY_us(1000);
      000213 90 03 E8         [24]  884 	mov	dptr,#0x03e8
      000216 12r00r00         [24]  885 	lcall	_DELAY_us
                                    886 ;	src/libs/lcd.c:175: EN_P0 = LOW;
                                    887 ;	assignBit
      000219 C2 82            [12]  888 	clr	_EN_P0
                                    889 ;	src/libs/lcd.c:176: break;
                                    890 ;	src/libs/lcd.c:177: case DATABUS_P1:
      00021B 80 56            [24]  891 	sjmp	00112$
      00021D                        892 00108$:
                                    893 ;	src/libs/lcd.c:178: LcdDatabus_P1 = ((data<<4) & 0xF0);
      00021D 8F 06            [24]  894 	mov	ar6,r7
      00021F EE               [12]  895 	mov	a,r6
      000220 C4               [12]  896 	swap	a
      000221 54 F0            [12]  897 	anl	a,#0xf0
      000223 FE               [12]  898 	mov	r6,a
      000224 74 F0            [12]  899 	mov	a,#0xf0
      000226 5E               [12]  900 	anl	a,r6
      000227 F5 90            [12]  901 	mov	_P1,a
                                    902 ;	src/libs/lcd.c:179: RS_P1 = HIGH;
                                    903 ;	assignBit
      000229 D2 90            [12]  904 	setb	_RS_P1
                                    905 ;	src/libs/lcd.c:180: RW_P1 = LOW;
                                    906 ;	assignBit
      00022B C2 91            [12]  907 	clr	_RW_P1
                                    908 ;	src/libs/lcd.c:181: EN_P1 = HIGH;
                                    909 ;	assignBit
      00022D D2 92            [12]  910 	setb	_EN_P1
                                    911 ;	src/libs/lcd.c:182: DELAY_us(1000);
      00022F 90 03 E8         [24]  912 	mov	dptr,#0x03e8
      000232 12r00r00         [24]  913 	lcall	_DELAY_us
                                    914 ;	src/libs/lcd.c:183: EN_P1 = LOW;
                                    915 ;	assignBit
      000235 C2 92            [12]  916 	clr	_EN_P1
                                    917 ;	src/libs/lcd.c:184: break;
                                    918 ;	src/libs/lcd.c:185: case DATABUS_P2:
      000237 80 3A            [24]  919 	sjmp	00112$
      000239                        920 00109$:
                                    921 ;	src/libs/lcd.c:186: LcdDatabus_P2 = ((data<<4) & 0xF0);
      000239 8F 06            [24]  922 	mov	ar6,r7
      00023B EE               [12]  923 	mov	a,r6
      00023C C4               [12]  924 	swap	a
      00023D 54 F0            [12]  925 	anl	a,#0xf0
      00023F FE               [12]  926 	mov	r6,a
      000240 74 F0            [12]  927 	mov	a,#0xf0
      000242 5E               [12]  928 	anl	a,r6
      000243 F5 A0            [12]  929 	mov	_P2,a
                                    930 ;	src/libs/lcd.c:187: RS_P2 = HIGH;
                                    931 ;	assignBit
      000245 D2 A0            [12]  932 	setb	_RS_P2
                                    933 ;	src/libs/lcd.c:188: RW_P2 = LOW;
                                    934 ;	assignBit
      000247 C2 A1            [12]  935 	clr	_RW_P2
                                    936 ;	src/libs/lcd.c:189: EN_P2 = HIGH;
                                    937 ;	assignBit
      000249 D2 A2            [12]  938 	setb	_EN_P2
                                    939 ;	src/libs/lcd.c:190: DELAY_us(1000);
      00024B 90 03 E8         [24]  940 	mov	dptr,#0x03e8
      00024E 12r00r00         [24]  941 	lcall	_DELAY_us
                                    942 ;	src/libs/lcd.c:191: EN_P2 = LOW;
                                    943 ;	assignBit
      000251 C2 A2            [12]  944 	clr	_EN_P2
                                    945 ;	src/libs/lcd.c:192: break;
                                    946 ;	src/libs/lcd.c:193: case DATABUS_P3:
      000253 80 1E            [24]  947 	sjmp	00112$
      000255                        948 00110$:
                                    949 ;	src/libs/lcd.c:194: LcdDatabus_P3 = ((data<<4) & 0xF0);
      000255 EF               [12]  950 	mov	a,r7
      000256 C4               [12]  951 	swap	a
      000257 54 F0            [12]  952 	anl	a,#0xf0
      000259 FF               [12]  953 	mov	r7,a
      00025A 74 F0            [12]  954 	mov	a,#0xf0
      00025C 5F               [12]  955 	anl	a,r7
      00025D F5 B0            [12]  956 	mov	_P3,a
                                    957 ;	src/libs/lcd.c:195: RS_P3 = HIGH;
                                    958 ;	assignBit
      00025F D2 B0            [12]  959 	setb	_RS_P3
                                    960 ;	src/libs/lcd.c:196: RW_P3 = LOW;
                                    961 ;	assignBit
      000261 C2 B1            [12]  962 	clr	_RW_P3
                                    963 ;	src/libs/lcd.c:197: EN_P3 = HIGH;
                                    964 ;	assignBit
      000263 D2 B2            [12]  965 	setb	_EN_P3
                                    966 ;	src/libs/lcd.c:198: DELAY_us(1000);
      000265 90 03 E8         [24]  967 	mov	dptr,#0x03e8
      000268 12r00r00         [24]  968 	lcall	_DELAY_us
                                    969 ;	src/libs/lcd.c:199: EN_P3 = LOW;
                                    970 ;	assignBit
      00026B C2 B2            [12]  971 	clr	_EN_P3
                                    972 ;	src/libs/lcd.c:200: break;
                                    973 ;	src/libs/lcd.c:201: default:
      00026D 80 04            [24]  974 	sjmp	00112$
      00026F                        975 00111$:
                                    976 ;	src/libs/lcd.c:202: return -1;
      00026F 90 FF FF         [24]  977 	mov	dptr,#0xffff
                                    978 ;	src/libs/lcd.c:203: }
      000272 22               [24]  979 	ret
      000273                        980 00112$:
                                    981 ;	src/libs/lcd.c:205: DELAY_us(10000);
      000273 90 27 10         [24]  982 	mov	dptr,#0x2710
      000276 12r00r00         [24]  983 	lcall	_DELAY_us
                                    984 ;	src/libs/lcd.c:206: return 0;
      000279 90 00 00         [24]  985 	mov	dptr,#0x0000
                                    986 ;	src/libs/lcd.c:207: }
      00027C 22               [24]  987 	ret
                                    988 ;------------------------------------------------------------
                                    989 ;Allocation info for local variables in function 'printString'
                                    990 ;------------------------------------------------------------
                                    991 ;string                    Allocated with name '_printString_PARM_2'
                                    992 ;line                      Allocated to registers r7 
                                    993 ;------------------------------------------------------------
                                    994 ;	src/libs/lcd.c:209: void printString(uint8_t line, char* string){
                                    995 ;	-----------------------------------------
                                    996 ;	 function printString
                                    997 ;	-----------------------------------------
      00027D                        998 _printString:
                                    999 ;	src/libs/lcd.c:210: if (line == FIRST_LINE){
      00027D E5 82            [12] 1000 	mov	a,dpl
      00027F FF               [12] 1001 	mov	r7,a
      000280 70 08            [24] 1002 	jnz	00116$
                                   1003 ;	src/libs/lcd.c:211: LCDCmdWrite(CURSOR_TO_FIRST_LINE);
      000282 75 82 80         [24] 1004 	mov	dpl,#0x80
      000285 12r00r3D         [24] 1005 	lcall	_LCDCmdWrite
      000288 80 3D            [24] 1006 	sjmp	00132$
      00028A                       1007 00116$:
                                   1008 ;	src/libs/lcd.c:213: else if (line == SECOND_LINE && (__config.LCDType == LCD_16x2 
      00028A BF 01 17         [24] 1009 	cjne	r7,#0x01,00110$
      00028D AE*08            [24] 1010 	mov	r6,___config
      00028F BE 01 02         [24] 1011 	cjne	r6,#0x01,00167$
      000292 80 08            [24] 1012 	sjmp	00109$
      000294                       1013 00167$:
                                   1014 ;	src/libs/lcd.c:214: || __config.LCDType == LCD_16x3
      000294 BE 02 02         [24] 1015 	cjne	r6,#0x02,00168$
      000297 80 03            [24] 1016 	sjmp	00109$
      000299                       1017 00168$:
                                   1018 ;	src/libs/lcd.c:215: || __config.LCDType == LCD_16x4)){
      000299 BE 03 08         [24] 1019 	cjne	r6,#0x03,00110$
      00029C                       1020 00109$:
                                   1021 ;	src/libs/lcd.c:216: LCDCmdWrite(CURSOR_TO_SECOND_LINE);
      00029C 75 82 C0         [24] 1022 	mov	dpl,#0xc0
      00029F 12r00r3D         [24] 1023 	lcall	_LCDCmdWrite
      0002A2 80 23            [24] 1024 	sjmp	00132$
      0002A4                       1025 00110$:
                                   1026 ;	src/libs/lcd.c:218: else if (line == THIRD_LINE && (__config.LCDType == LCD_16x3
      0002A4 BF 02 12         [24] 1027 	cjne	r7,#0x02,00105$
      0002A7 AE*08            [24] 1028 	mov	r6,___config
      0002A9 BE 02 02         [24] 1029 	cjne	r6,#0x02,00173$
      0002AC 80 03            [24] 1030 	sjmp	00104$
      0002AE                       1031 00173$:
                                   1032 ;	src/libs/lcd.c:219: || __config.LCDType == LCD_16x4)){
      0002AE BE 03 08         [24] 1033 	cjne	r6,#0x03,00105$
      0002B1                       1034 00104$:
                                   1035 ;	src/libs/lcd.c:220: LCDCmdWrite(CURSOR_TO_THIRD_LINE);
      0002B1 75 82 90         [24] 1036 	mov	dpl,#0x90
      0002B4 12r00r3D         [24] 1037 	lcall	_LCDCmdWrite
      0002B7 80 0E            [24] 1038 	sjmp	00132$
      0002B9                       1039 00105$:
                                   1040 ;	src/libs/lcd.c:222: else if (line == FORTH_LINE && __config.LCDType == LCD_16x4){
      0002B9 BF 03 0B         [24] 1041 	cjne	r7,#0x03,00132$
      0002BC 74 03            [12] 1042 	mov	a,#0x03
      0002BE B5*08 06         [24] 1043 	cjne	a,___config,00132$
                                   1044 ;	src/libs/lcd.c:223: LCDCmdWrite(CURSOR_TO_FORTH_LINE);
      0002C1 75 82 D0         [24] 1045 	mov	dpl,#0xd0
      0002C4 12r00r3D         [24] 1046 	lcall	_LCDCmdWrite
                                   1047 ;	src/libs/lcd.c:226: while(*string){
      0002C7                       1048 00132$:
      0002C7 AD*0B            [24] 1049 	mov	r5,_printString_PARM_2
      0002C9 AE*0C            [24] 1050 	mov	r6,(_printString_PARM_2 + 1)
      0002CB AF*0D            [24] 1051 	mov	r7,(_printString_PARM_2 + 2)
      0002CD                       1052 00118$:
      0002CD 8D 82            [24] 1053 	mov	dpl,r5
      0002CF 8E 83            [24] 1054 	mov	dph,r6
      0002D1 8F F0            [24] 1055 	mov	b,r7
      0002D3 12r00r00         [24] 1056 	lcall	__gptrget
      0002D6 FC               [12] 1057 	mov	r4,a
      0002D7 60 18            [24] 1058 	jz	00121$
                                   1059 ;	src/libs/lcd.c:227: LCDDataWrite(*string++);
      0002D9 8C 82            [24] 1060 	mov	dpl,r4
      0002DB 0D               [12] 1061 	inc	r5
      0002DC BD 00 01         [24] 1062 	cjne	r5,#0x00,00181$
      0002DF 0E               [12] 1063 	inc	r6
      0002E0                       1064 00181$:
      0002E0 C0 07            [24] 1065 	push	ar7
      0002E2 C0 06            [24] 1066 	push	ar6
      0002E4 C0 05            [24] 1067 	push	ar5
      0002E6 12r01r5D         [24] 1068 	lcall	_LCDDataWrite
      0002E9 D0 05            [24] 1069 	pop	ar5
      0002EB D0 06            [24] 1070 	pop	ar6
      0002ED D0 07            [24] 1071 	pop	ar7
      0002EF 80 DC            [24] 1072 	sjmp	00118$
      0002F1                       1073 00121$:
                                   1074 ;	src/libs/lcd.c:229: }
      0002F1 22               [24] 1075 	ret
                                   1076 	.area CSEG    (CODE)
                                   1077 	.area CONST   (CODE)
                                   1078 	.area XINIT   (CODE)
                                   1079 	.area CABS    (ABS,CODE)
