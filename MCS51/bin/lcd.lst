                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcd
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _pinSetup_PARM_2
                                     12 	.globl _LCDSetup_PARM_3
                                     13 	.globl _LCDSetup_PARM_2
                                     14 	.globl _DELAY_us
                                     15 	.globl _EN
                                     16 	.globl _RW
                                     17 	.globl _RS
                                     18 	.globl _EN_P3
                                     19 	.globl _RW_P3
                                     20 	.globl _RS_P3
                                     21 	.globl _EN_P2
                                     22 	.globl _RW_P2
                                     23 	.globl _RS_P2
                                     24 	.globl _EN_P1
                                     25 	.globl _RW_P1
                                     26 	.globl _RS_P1
                                     27 	.globl _EN_P0
                                     28 	.globl _RW_P0
                                     29 	.globl _RS_P0
                                     30 	.globl _P_NC
                                     31 	.globl _CY
                                     32 	.globl _AC
                                     33 	.globl _F0
                                     34 	.globl _RS1
                                     35 	.globl _RS0
                                     36 	.globl _OV
                                     37 	.globl _FL
                                     38 	.globl _P
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ES
                                     62 	.globl _ET1
                                     63 	.globl _EX1
                                     64 	.globl _ET0
                                     65 	.globl _EX0
                                     66 	.globl _P2_7
                                     67 	.globl _P2_6
                                     68 	.globl _P2_5
                                     69 	.globl _P2_4
                                     70 	.globl _P2_3
                                     71 	.globl _P2_2
                                     72 	.globl _P2_1
                                     73 	.globl _P2_0
                                     74 	.globl _SM0
                                     75 	.globl _SM1
                                     76 	.globl _SM2
                                     77 	.globl _REN
                                     78 	.globl _TB8
                                     79 	.globl _RB8
                                     80 	.globl _TI
                                     81 	.globl _RI
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _TF1
                                     91 	.globl _TR1
                                     92 	.globl _TF0
                                     93 	.globl _TR0
                                     94 	.globl _IE1
                                     95 	.globl _IT1
                                     96 	.globl _IE0
                                     97 	.globl _IT0
                                     98 	.globl _P0_7
                                     99 	.globl _P0_6
                                    100 	.globl _P0_5
                                    101 	.globl _P0_4
                                    102 	.globl _P0_3
                                    103 	.globl _P0_2
                                    104 	.globl _P0_1
                                    105 	.globl _P0_0
                                    106 	.globl _B
                                    107 	.globl _A
                                    108 	.globl _ACC
                                    109 	.globl _PSW
                                    110 	.globl _IP
                                    111 	.globl _P3
                                    112 	.globl _IE
                                    113 	.globl _P2
                                    114 	.globl _SBUF
                                    115 	.globl _SCON
                                    116 	.globl _P1
                                    117 	.globl _TH1
                                    118 	.globl _TH0
                                    119 	.globl _TL1
                                    120 	.globl _TL0
                                    121 	.globl _TMOD
                                    122 	.globl _TCON
                                    123 	.globl _PCON
                                    124 	.globl _DPH
                                    125 	.globl _DPL
                                    126 	.globl _SP
                                    127 	.globl _P0
                                    128 	.globl _printString_PARM_2
                                    129 	.globl ___config
                                    130 	.globl _LCDLineAddress
                                    131 	.globl _LCDSetup
                                    132 	.globl _pinSetup
                                    133 	.globl _LCDInit
                                    134 	.globl _LCDCmdWrite
                                    135 	.globl _LCDDataWrite
                                    136 	.globl _printString
                                    137 ;--------------------------------------------------------
                                    138 ; special function registers
                                    139 ;--------------------------------------------------------
                                    140 	.area RSEG    (ABS,DATA)
      000000                        141 	.org 0x0000
                           000080   142 _P0	=	0x0080
                           000081   143 _SP	=	0x0081
                           000082   144 _DPL	=	0x0082
                           000083   145 _DPH	=	0x0083
                           000087   146 _PCON	=	0x0087
                           000088   147 _TCON	=	0x0088
                           000089   148 _TMOD	=	0x0089
                           00008A   149 _TL0	=	0x008a
                           00008B   150 _TL1	=	0x008b
                           00008C   151 _TH0	=	0x008c
                           00008D   152 _TH1	=	0x008d
                           000090   153 _P1	=	0x0090
                           000098   154 _SCON	=	0x0098
                           000099   155 _SBUF	=	0x0099
                           0000A0   156 _P2	=	0x00a0
                           0000A8   157 _IE	=	0x00a8
                           0000B0   158 _P3	=	0x00b0
                           0000B8   159 _IP	=	0x00b8
                           0000D0   160 _PSW	=	0x00d0
                           0000E0   161 _ACC	=	0x00e0
                           0000E0   162 _A	=	0x00e0
                           0000F0   163 _B	=	0x00f0
                                    164 ;--------------------------------------------------------
                                    165 ; special function bits
                                    166 ;--------------------------------------------------------
                                    167 	.area RSEG    (ABS,DATA)
      000000                        168 	.org 0x0000
                           000080   169 _P0_0	=	0x0080
                           000081   170 _P0_1	=	0x0081
                           000082   171 _P0_2	=	0x0082
                           000083   172 _P0_3	=	0x0083
                           000084   173 _P0_4	=	0x0084
                           000085   174 _P0_5	=	0x0085
                           000086   175 _P0_6	=	0x0086
                           000087   176 _P0_7	=	0x0087
                           000088   177 _IT0	=	0x0088
                           000089   178 _IE0	=	0x0089
                           00008A   179 _IT1	=	0x008a
                           00008B   180 _IE1	=	0x008b
                           00008C   181 _TR0	=	0x008c
                           00008D   182 _TF0	=	0x008d
                           00008E   183 _TR1	=	0x008e
                           00008F   184 _TF1	=	0x008f
                           000090   185 _P1_0	=	0x0090
                           000091   186 _P1_1	=	0x0091
                           000092   187 _P1_2	=	0x0092
                           000093   188 _P1_3	=	0x0093
                           000094   189 _P1_4	=	0x0094
                           000095   190 _P1_5	=	0x0095
                           000096   191 _P1_6	=	0x0096
                           000097   192 _P1_7	=	0x0097
                           000098   193 _RI	=	0x0098
                           000099   194 _TI	=	0x0099
                           00009A   195 _RB8	=	0x009a
                           00009B   196 _TB8	=	0x009b
                           00009C   197 _REN	=	0x009c
                           00009D   198 _SM2	=	0x009d
                           00009E   199 _SM1	=	0x009e
                           00009F   200 _SM0	=	0x009f
                           0000A0   201 _P2_0	=	0x00a0
                           0000A1   202 _P2_1	=	0x00a1
                           0000A2   203 _P2_2	=	0x00a2
                           0000A3   204 _P2_3	=	0x00a3
                           0000A4   205 _P2_4	=	0x00a4
                           0000A5   206 _P2_5	=	0x00a5
                           0000A6   207 _P2_6	=	0x00a6
                           0000A7   208 _P2_7	=	0x00a7
                           0000A8   209 _EX0	=	0x00a8
                           0000A9   210 _ET0	=	0x00a9
                           0000AA   211 _EX1	=	0x00aa
                           0000AB   212 _ET1	=	0x00ab
                           0000AC   213 _ES	=	0x00ac
                           0000AF   214 _EA	=	0x00af
                           0000B0   215 _P3_0	=	0x00b0
                           0000B1   216 _P3_1	=	0x00b1
                           0000B2   217 _P3_2	=	0x00b2
                           0000B3   218 _P3_3	=	0x00b3
                           0000B4   219 _P3_4	=	0x00b4
                           0000B5   220 _P3_5	=	0x00b5
                           0000B6   221 _P3_6	=	0x00b6
                           0000B7   222 _P3_7	=	0x00b7
                           0000B0   223 _RXD	=	0x00b0
                           0000B1   224 _TXD	=	0x00b1
                           0000B2   225 _INT0	=	0x00b2
                           0000B3   226 _INT1	=	0x00b3
                           0000B4   227 _T0	=	0x00b4
                           0000B5   228 _T1	=	0x00b5
                           0000B6   229 _WR	=	0x00b6
                           0000B7   230 _RD	=	0x00b7
                           0000B8   231 _PX0	=	0x00b8
                           0000B9   232 _PT0	=	0x00b9
                           0000BA   233 _PX1	=	0x00ba
                           0000BB   234 _PT1	=	0x00bb
                           0000BC   235 _PS	=	0x00bc
                           0000D0   236 _P	=	0x00d0
                           0000D1   237 _FL	=	0x00d1
                           0000D2   238 _OV	=	0x00d2
                           0000D3   239 _RS0	=	0x00d3
                           0000D4   240 _RS1	=	0x00d4
                           0000D5   241 _F0	=	0x00d5
                           0000D6   242 _AC	=	0x00d6
                           0000D7   243 _CY	=	0x00d7
                           0000FF   244 _P_NC	=	0x00ff
                           000080   245 _RS_P0	=	0x0080
                           000081   246 _RW_P0	=	0x0081
                           000082   247 _EN_P0	=	0x0082
                           000090   248 _RS_P1	=	0x0090
                           000091   249 _RW_P1	=	0x0091
                           000092   250 _EN_P1	=	0x0092
                           0000A0   251 _RS_P2	=	0x00a0
                           0000A1   252 _RW_P2	=	0x00a1
                           0000A2   253 _EN_P2	=	0x00a2
                           0000B0   254 _RS_P3	=	0x00b0
                           0000B1   255 _RW_P3	=	0x00b1
                           0000B2   256 _EN_P3	=	0x00b2
                           0000A0   257 _RS	=	0x00a0
                           0000A1   258 _RW	=	0x00a1
                           0000A2   259 _EN	=	0x00a2
      000000                        260 _pinSetup_pin_65536_11:
      000000                        261 	.ds 1
                                    262 ;--------------------------------------------------------
                                    263 ; overlayable register banks
                                    264 ;--------------------------------------------------------
                                    265 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        266 	.ds 8
                                    267 ;--------------------------------------------------------
                                    268 ; internal ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area DSEG    (DATA)
      000000                        271 _LCDLineAddress::
      000000                        272 	.ds 8
      000008                        273 ___config::
      000008                        274 	.ds 3
      00000B                        275 _printString_PARM_2:
      00000B                        276 	.ds 3
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable items in internal ram 
                                    279 ;--------------------------------------------------------
                                    280 	.area	OSEG    (OVR,DATA)
      000000                        281 _LCDSetup_PARM_2:
      000000                        282 	.ds 1
      000001                        283 _LCDSetup_PARM_3:
      000001                        284 	.ds 1
                                    285 	.area	OSEG    (OVR,DATA)
      000000                        286 _pinSetup_PARM_2:
      000000                        287 	.ds 1
                                    288 ;--------------------------------------------------------
                                    289 ; indirectly addressable internal ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area ISEG    (DATA)
                                    292 ;--------------------------------------------------------
                                    293 ; absolute internal ram data
                                    294 ;--------------------------------------------------------
                                    295 	.area IABS    (ABS,DATA)
                                    296 	.area IABS    (ABS,DATA)
                                    297 ;--------------------------------------------------------
                                    298 ; bit data
                                    299 ;--------------------------------------------------------
                                    300 	.area BSEG    (BIT)
                                    301 ;--------------------------------------------------------
                                    302 ; paged external ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area PSEG    (PAG,XDATA)
                                    305 ;--------------------------------------------------------
                                    306 ; external ram data
                                    307 ;--------------------------------------------------------
                                    308 	.area XSEG    (XDATA)
                                    309 ;--------------------------------------------------------
                                    310 ; absolute external ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area XABS    (ABS,XDATA)
                                    313 ;--------------------------------------------------------
                                    314 ; external initialized ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area XISEG   (XDATA)
                                    317 	.area HOME    (CODE)
                                    318 	.area GSINIT0 (CODE)
                                    319 	.area GSINIT1 (CODE)
                                    320 	.area GSINIT2 (CODE)
                                    321 	.area GSINIT3 (CODE)
                                    322 	.area GSINIT4 (CODE)
                                    323 	.area GSINIT5 (CODE)
                                    324 	.area GSINIT  (CODE)
                                    325 	.area GSFINAL (CODE)
                                    326 	.area CSEG    (CODE)
                                    327 ;--------------------------------------------------------
                                    328 ; global & static initialisations
                                    329 ;--------------------------------------------------------
                                    330 	.area HOME    (CODE)
                                    331 	.area GSINIT  (CODE)
                                    332 	.area GSFINAL (CODE)
                                    333 	.area GSINIT  (CODE)
                                    334 ;	src/libs/lcd.h:72: uint16_t LCDLineAddress[] = {0x80, 0xC0, 0x90, 0xD0};
      000000 75*00 80         [24]  335 	mov	(_LCDLineAddress + 0),#0x80
      000003 75*01 00         [24]  336 	mov	(_LCDLineAddress + 1),#0x00
      000006 75*02 C0         [24]  337 	mov	((_LCDLineAddress + 0x0002) + 0),#0xc0
      000009 75*03 00         [24]  338 	mov	((_LCDLineAddress + 0x0002) + 1),#0x00
      00000C 75*04 90         [24]  339 	mov	((_LCDLineAddress + 0x0004) + 0),#0x90
      00000F 75*05 00         [24]  340 	mov	((_LCDLineAddress + 0x0004) + 1),#0x00
      000012 75*06 D0         [24]  341 	mov	((_LCDLineAddress + 0x0006) + 0),#0xd0
      000015 75*07 00         [24]  342 	mov	((_LCDLineAddress + 0x0006) + 1),#0x00
                                    343 ;--------------------------------------------------------
                                    344 ; Home
                                    345 ;--------------------------------------------------------
                                    346 	.area HOME    (CODE)
                                    347 	.area HOME    (CODE)
                                    348 ;--------------------------------------------------------
                                    349 ; code
                                    350 ;--------------------------------------------------------
                                    351 	.area CSEG    (CODE)
                                    352 ;------------------------------------------------------------
                                    353 ;Allocation info for local variables in function 'LCDSetup'
                                    354 ;------------------------------------------------------------
                                    355 ;lcdDatabusType            Allocated with name '_LCDSetup_PARM_2'
                                    356 ;lcdBusModes               Allocated with name '_LCDSetup_PARM_3'
                                    357 ;lcdType                   Allocated to registers r7 
                                    358 ;------------------------------------------------------------
                                    359 ;	src/libs/lcd.c:8: int LCDSetup(uint8_t lcdType, uint8_t lcdDatabusType, uint8_t lcdBusModes)
                                    360 ;	-----------------------------------------
                                    361 ;	 function LCDSetup
                                    362 ;	-----------------------------------------
      000000                        363 _LCDSetup:
                           000007   364 	ar7 = 0x07
                           000006   365 	ar6 = 0x06
                           000005   366 	ar5 = 0x05
                           000004   367 	ar4 = 0x04
                           000003   368 	ar3 = 0x03
                           000002   369 	ar2 = 0x02
                           000001   370 	ar1 = 0x01
                           000000   371 	ar0 = 0x00
      000000 AF 82            [24]  372 	mov	r7,dpl
                                    373 ;	src/libs/lcd.c:10: __config.LCDType = lcdType;
      000002 8F*08            [24]  374 	mov	___config,r7
                                    375 ;	src/libs/lcd.c:11: __config.__LCDBusModes = lcdBusModes;
      000004 85*01*09         [24]  376 	mov	(___config + 0x0001),_LCDSetup_PARM_3
                                    377 ;	src/libs/lcd.c:12: __config.LCDDatabusType = lcdDatabusType;
      000007 85*00*0A         [24]  378 	mov	(___config + 0x0002),_LCDSetup_PARM_2
                                    379 ;	src/libs/lcd.c:13: return 0;
      00000A 90 00 00         [24]  380 	mov	dptr,#0x0000
                                    381 ;	src/libs/lcd.c:14: }
      00000D 22               [24]  382 	ret
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'pinSetup'
                                    385 ;------------------------------------------------------------
                                    386 ;pin                       Allocated with name '_pinSetup_pin_65536_11'
                                    387 ;modes                     Allocated with name '_pinSetup_PARM_2'
                                    388 ;------------------------------------------------------------
                                    389 ;	src/libs/lcd.c:16: void pinSetup(__sbit pin, uint8_t modes){
                                    390 ;	-----------------------------------------
                                    391 ;	 function pinSetup
                                    392 ;	-----------------------------------------
      00000E                        393 _pinSetup:
                                    394 ;	src/libs/lcd.c:18: pin = modes;
                                    395 ;	assignBit
      00000E E5*00            [12]  396 	mov	a,_pinSetup_PARM_2
      000010 24 FF            [12]  397 	add	a,#0xff
      000012 92*00            [24]  398 	mov	_pinSetup_pin_65536_11,c
                                    399 ;	src/libs/lcd.c:19: }
      000014 22               [24]  400 	ret
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'LCDInit'
                                    403 ;------------------------------------------------------------
                                    404 ;	src/libs/lcd.c:21: void LCDInit(){
                                    405 ;	-----------------------------------------
                                    406 ;	 function LCDInit
                                    407 ;	-----------------------------------------
      000015                        408 _LCDInit:
                                    409 ;	src/libs/lcd.c:30: LCDCmdWrite(RETURN_HOME);
      000015 75 82 02         [24]  410 	mov	dpl,#0x02
      000018 12r00r3D         [24]  411 	lcall	_LCDCmdWrite
                                    412 ;	src/libs/lcd.c:32: if (__config.__LCDBusModes == BUS4){
      00001B AF*09            [24]  413 	mov	r7,(___config + 0x0001)
      00001D BF 01 08         [24]  414 	cjne	r7,#0x01,00104$
                                    415 ;	src/libs/lcd.c:33: LCDCmdWrite(CMD_LCD_FOUR_BIT_MODE);
      000020 75 82 28         [24]  416 	mov	dpl,#0x28
      000023 12r00r3D         [24]  417 	lcall	_LCDCmdWrite
      000026 80 09            [24]  418 	sjmp	00105$
      000028                        419 00104$:
                                    420 ;	src/libs/lcd.c:34: } else if (__config.__LCDBusModes == BUS8){
      000028 EF               [12]  421 	mov	a,r7
      000029 70 06            [24]  422 	jnz	00105$
                                    423 ;	src/libs/lcd.c:35: LCDCmdWrite(CMD_LCD_EIGHT_BIT_MODE);
      00002B 75 82 38         [24]  424 	mov	dpl,#0x38
      00002E 12r00r3D         [24]  425 	lcall	_LCDCmdWrite
      000031                        426 00105$:
                                    427 ;	src/libs/lcd.c:38: LCDCmdWrite(DISPLAY_ON_CURSOR_BLINK_1);
      000031 75 82 0E         [24]  428 	mov	dpl,#0x0e
      000034 12r00r3D         [24]  429 	lcall	_LCDCmdWrite
                                    430 ;	src/libs/lcd.c:39: LCDCmdWrite(CLEAR_SCREEN);
      000037 75 82 01         [24]  431 	mov	dpl,#0x01
                                    432 ;	src/libs/lcd.c:41: }
      00003A 02r00r3D         [24]  433 	ljmp	_LCDCmdWrite
                                    434 ;------------------------------------------------------------
                                    435 ;Allocation info for local variables in function 'LCDCmdWrite'
                                    436 ;------------------------------------------------------------
                                    437 ;cmd                       Allocated to registers r7 
                                    438 ;------------------------------------------------------------
                                    439 ;	src/libs/lcd.c:43: int LCDCmdWrite(char cmd){
                                    440 ;	-----------------------------------------
                                    441 ;	 function LCDCmdWrite
                                    442 ;	-----------------------------------------
      00003D                        443 _LCDCmdWrite:
      00003D AF 82            [24]  444 	mov	r7,dpl
                                    445 ;	src/libs/lcd.c:45: switch (__config.LCDDatabusType)
      00003F E5*0A            [12]  446 	mov	a,(___config + 0x0002)
      000041 FE               [12]  447 	mov	r6,a
      000042 24 FC            [12]  448 	add	a,#0xff - 0x03
      000044 50 03            [24]  449 	jnc	00123$
      000046 02r00rBB         [24]  450 	ljmp	00105$
      000049                        451 00123$:
      000049 EE               [12]  452 	mov	a,r6
      00004A 2E               [12]  453 	add	a,r6
                                    454 ;	src/libs/lcd.c:47: case DATABUS_P0:
      00004B 90r00r4F         [24]  455 	mov	dptr,#00124$
      00004E 73               [24]  456 	jmp	@a+dptr
      00004F                        457 00124$:
      00004F 80 06            [24]  458 	sjmp	00101$
      000051 80 1D            [24]  459 	sjmp	00102$
      000053 80 34            [24]  460 	sjmp	00103$
      000055 80 4B            [24]  461 	sjmp	00104$
      000057                        462 00101$:
                                    463 ;	src/libs/lcd.c:48: LcdDatabus_P0 = (cmd & 0xF0);
      000057 74 F0            [12]  464 	mov	a,#0xf0
      000059 5F               [12]  465 	anl	a,r7
      00005A F5 80            [12]  466 	mov	_P0,a
                                    467 ;	src/libs/lcd.c:49: RS_P0 = LOW;
                                    468 ;	assignBit
      00005C C2 80            [12]  469 	clr	_RS_P0
                                    470 ;	src/libs/lcd.c:50: RW_P0 = LOW;
                                    471 ;	assignBit
      00005E C2 81            [12]  472 	clr	_RW_P0
                                    473 ;	src/libs/lcd.c:51: EN_P0 = HIGH;
                                    474 ;	assignBit
      000060 D2 82            [12]  475 	setb	_EN_P0
                                    476 ;	src/libs/lcd.c:52: DELAY_us(1000);
      000062 90 03 E8         [24]  477 	mov	dptr,#0x03e8
      000065 C0 07            [24]  478 	push	ar7
      000067 12r00r00         [24]  479 	lcall	_DELAY_us
      00006A D0 07            [24]  480 	pop	ar7
                                    481 ;	src/libs/lcd.c:53: EN_P0 = LOW;
                                    482 ;	assignBit
      00006C C2 82            [12]  483 	clr	_EN_P0
                                    484 ;	src/libs/lcd.c:54: break;
                                    485 ;	src/libs/lcd.c:56: case DATABUS_P1:
      00006E 80 4F            [24]  486 	sjmp	00106$
      000070                        487 00102$:
                                    488 ;	src/libs/lcd.c:57: LcdDatabus_P1 = (cmd & 0xF0);
      000070 74 F0            [12]  489 	mov	a,#0xf0
      000072 5F               [12]  490 	anl	a,r7
      000073 F5 90            [12]  491 	mov	_P1,a
                                    492 ;	src/libs/lcd.c:58: RS_P1 = LOW;
                                    493 ;	assignBit
      000075 C2 90            [12]  494 	clr	_RS_P1
                                    495 ;	src/libs/lcd.c:59: RW_P1 = LOW;
                                    496 ;	assignBit
      000077 C2 91            [12]  497 	clr	_RW_P1
                                    498 ;	src/libs/lcd.c:60: EN_P1 = HIGH;
                                    499 ;	assignBit
      000079 D2 92            [12]  500 	setb	_EN_P1
                                    501 ;	src/libs/lcd.c:61: DELAY_us(1000);
      00007B 90 03 E8         [24]  502 	mov	dptr,#0x03e8
      00007E C0 07            [24]  503 	push	ar7
      000080 12r00r00         [24]  504 	lcall	_DELAY_us
      000083 D0 07            [24]  505 	pop	ar7
                                    506 ;	src/libs/lcd.c:62: EN_P1 = LOW;
                                    507 ;	assignBit
      000085 C2 92            [12]  508 	clr	_EN_P1
                                    509 ;	src/libs/lcd.c:63: break;
                                    510 ;	src/libs/lcd.c:65: case DATABUS_P2:
      000087 80 36            [24]  511 	sjmp	00106$
      000089                        512 00103$:
                                    513 ;	src/libs/lcd.c:66: LcdDatabus_P2 = (cmd & 0xF0);
      000089 74 F0            [12]  514 	mov	a,#0xf0
      00008B 5F               [12]  515 	anl	a,r7
      00008C F5 A0            [12]  516 	mov	_P2,a
                                    517 ;	src/libs/lcd.c:67: RS_P2 = LOW;
                                    518 ;	assignBit
      00008E C2 A0            [12]  519 	clr	_RS_P2
                                    520 ;	src/libs/lcd.c:68: RW_P2 = LOW;
                                    521 ;	assignBit
      000090 C2 A1            [12]  522 	clr	_RW_P2
                                    523 ;	src/libs/lcd.c:69: EN_P2 = HIGH;
                                    524 ;	assignBit
      000092 D2 A2            [12]  525 	setb	_EN_P2
                                    526 ;	src/libs/lcd.c:70: DELAY_us(1000);
      000094 90 03 E8         [24]  527 	mov	dptr,#0x03e8
      000097 C0 07            [24]  528 	push	ar7
      000099 12r00r00         [24]  529 	lcall	_DELAY_us
      00009C D0 07            [24]  530 	pop	ar7
                                    531 ;	src/libs/lcd.c:71: EN_P2 = LOW;
                                    532 ;	assignBit
      00009E C2 A2            [12]  533 	clr	_EN_P2
                                    534 ;	src/libs/lcd.c:72: break;
                                    535 ;	src/libs/lcd.c:74: case DATABUS_P3:
      0000A0 80 1D            [24]  536 	sjmp	00106$
      0000A2                        537 00104$:
                                    538 ;	src/libs/lcd.c:75: LcdDatabus_P3 = (cmd & 0xF0);
      0000A2 74 F0            [12]  539 	mov	a,#0xf0
      0000A4 5F               [12]  540 	anl	a,r7
      0000A5 F5 B0            [12]  541 	mov	_P3,a
                                    542 ;	src/libs/lcd.c:76: RS_P3 = LOW;
                                    543 ;	assignBit
      0000A7 C2 B0            [12]  544 	clr	_RS_P3
                                    545 ;	src/libs/lcd.c:77: RW_P3 = LOW;
                                    546 ;	assignBit
      0000A9 C2 B1            [12]  547 	clr	_RW_P3
                                    548 ;	src/libs/lcd.c:78: EN_P3 = HIGH;
                                    549 ;	assignBit
      0000AB D2 B2            [12]  550 	setb	_EN_P3
                                    551 ;	src/libs/lcd.c:79: DELAY_us(1000);
      0000AD 90 03 E8         [24]  552 	mov	dptr,#0x03e8
      0000B0 C0 07            [24]  553 	push	ar7
      0000B2 12r00r00         [24]  554 	lcall	_DELAY_us
      0000B5 D0 07            [24]  555 	pop	ar7
                                    556 ;	src/libs/lcd.c:80: EN_P3 = LOW;
                                    557 ;	assignBit
      0000B7 C2 B2            [12]  558 	clr	_EN_P3
                                    559 ;	src/libs/lcd.c:81: break;
                                    560 ;	src/libs/lcd.c:83: default:
      0000B9 80 04            [24]  561 	sjmp	00106$
      0000BB                        562 00105$:
                                    563 ;	src/libs/lcd.c:84: return -1;
      0000BB 90 FF FF         [24]  564 	mov	dptr,#0xffff
      0000BE 22               [24]  565 	ret
                                    566 ;	src/libs/lcd.c:85: }
      0000BF                        567 00106$:
                                    568 ;	src/libs/lcd.c:88: DELAY_us(10000);
      0000BF 90 27 10         [24]  569 	mov	dptr,#0x2710
      0000C2 C0 07            [24]  570 	push	ar7
      0000C4 12r00r00         [24]  571 	lcall	_DELAY_us
      0000C7 D0 07            [24]  572 	pop	ar7
                                    573 ;	src/libs/lcd.c:90: switch (__config.LCDDatabusType)
      0000C9 E5*0A            [12]  574 	mov	a,(___config + 0x0002)
      0000CB FE               [12]  575 	mov	r6,a
      0000CC 24 FC            [12]  576 	add	a,#0xff - 0x03
      0000CE 50 03            [24]  577 	jnc	00125$
      0000D0 02r01r4F         [24]  578 	ljmp	00111$
      0000D3                        579 00125$:
      0000D3 EE               [12]  580 	mov	a,r6
      0000D4 2E               [12]  581 	add	a,r6
                                    582 ;	src/libs/lcd.c:92: case DATABUS_P0:
      0000D5 90r00rD9         [24]  583 	mov	dptr,#00126$
      0000D8 73               [24]  584 	jmp	@a+dptr
      0000D9                        585 00126$:
      0000D9 80 06            [24]  586 	sjmp	00107$
      0000DB 80 20            [24]  587 	sjmp	00108$
      0000DD 80 3A            [24]  588 	sjmp	00109$
      0000DF 80 54            [24]  589 	sjmp	00110$
      0000E1                        590 00107$:
                                    591 ;	src/libs/lcd.c:93: LcdDatabus_P0 = ((cmd<<4) & 0xF0);
      0000E1 8F 06            [24]  592 	mov	ar6,r7
      0000E3 EE               [12]  593 	mov	a,r6
      0000E4 C4               [12]  594 	swap	a
      0000E5 54 F0            [12]  595 	anl	a,#0xf0
      0000E7 FE               [12]  596 	mov	r6,a
      0000E8 74 F0            [12]  597 	mov	a,#0xf0
      0000EA 5E               [12]  598 	anl	a,r6
      0000EB F5 80            [12]  599 	mov	_P0,a
                                    600 ;	src/libs/lcd.c:94: RS_P0 = LOW;
                                    601 ;	assignBit
      0000ED C2 80            [12]  602 	clr	_RS_P0
                                    603 ;	src/libs/lcd.c:95: RW_P0 = LOW;
                                    604 ;	assignBit
      0000EF C2 81            [12]  605 	clr	_RW_P0
                                    606 ;	src/libs/lcd.c:96: EN_P0 = HIGH;
                                    607 ;	assignBit
      0000F1 D2 82            [12]  608 	setb	_EN_P0
                                    609 ;	src/libs/lcd.c:97: DELAY_us(1000);
      0000F3 90 03 E8         [24]  610 	mov	dptr,#0x03e8
      0000F6 12r00r00         [24]  611 	lcall	_DELAY_us
                                    612 ;	src/libs/lcd.c:98: EN_P0 = LOW;
                                    613 ;	assignBit
      0000F9 C2 82            [12]  614 	clr	_EN_P0
                                    615 ;	src/libs/lcd.c:99: break;
                                    616 ;	src/libs/lcd.c:100: case DATABUS_P1:
      0000FB 80 56            [24]  617 	sjmp	00112$
      0000FD                        618 00108$:
                                    619 ;	src/libs/lcd.c:101: LcdDatabus_P1 = ((cmd<<4) & 0xF0);
      0000FD 8F 06            [24]  620 	mov	ar6,r7
      0000FF EE               [12]  621 	mov	a,r6
      000100 C4               [12]  622 	swap	a
      000101 54 F0            [12]  623 	anl	a,#0xf0
      000103 FE               [12]  624 	mov	r6,a
      000104 74 F0            [12]  625 	mov	a,#0xf0
      000106 5E               [12]  626 	anl	a,r6
      000107 F5 90            [12]  627 	mov	_P1,a
                                    628 ;	src/libs/lcd.c:102: RS_P1 = LOW;
                                    629 ;	assignBit
      000109 C2 90            [12]  630 	clr	_RS_P1
                                    631 ;	src/libs/lcd.c:103: RW_P1 = LOW;
                                    632 ;	assignBit
      00010B C2 91            [12]  633 	clr	_RW_P1
                                    634 ;	src/libs/lcd.c:104: EN_P1 = HIGH;
                                    635 ;	assignBit
      00010D D2 92            [12]  636 	setb	_EN_P1
                                    637 ;	src/libs/lcd.c:105: DELAY_us(1000);
      00010F 90 03 E8         [24]  638 	mov	dptr,#0x03e8
      000112 12r00r00         [24]  639 	lcall	_DELAY_us
                                    640 ;	src/libs/lcd.c:106: EN_P1 = LOW;
                                    641 ;	assignBit
      000115 C2 92            [12]  642 	clr	_EN_P1
                                    643 ;	src/libs/lcd.c:107: break;
                                    644 ;	src/libs/lcd.c:108: case DATABUS_P2:
      000117 80 3A            [24]  645 	sjmp	00112$
      000119                        646 00109$:
                                    647 ;	src/libs/lcd.c:109: LcdDatabus_P2 = ((cmd<<4) & 0xF0);
      000119 8F 06            [24]  648 	mov	ar6,r7
      00011B EE               [12]  649 	mov	a,r6
      00011C C4               [12]  650 	swap	a
      00011D 54 F0            [12]  651 	anl	a,#0xf0
      00011F FE               [12]  652 	mov	r6,a
      000120 74 F0            [12]  653 	mov	a,#0xf0
      000122 5E               [12]  654 	anl	a,r6
      000123 F5 A0            [12]  655 	mov	_P2,a
                                    656 ;	src/libs/lcd.c:110: RS_P2 = LOW;
                                    657 ;	assignBit
      000125 C2 A0            [12]  658 	clr	_RS_P2
                                    659 ;	src/libs/lcd.c:111: RW_P2 = LOW;
                                    660 ;	assignBit
      000127 C2 A1            [12]  661 	clr	_RW_P2
                                    662 ;	src/libs/lcd.c:112: EN_P2 = HIGH;
                                    663 ;	assignBit
      000129 D2 A2            [12]  664 	setb	_EN_P2
                                    665 ;	src/libs/lcd.c:113: DELAY_us(1000);
      00012B 90 03 E8         [24]  666 	mov	dptr,#0x03e8
      00012E 12r00r00         [24]  667 	lcall	_DELAY_us
                                    668 ;	src/libs/lcd.c:114: EN_P2 = LOW;
                                    669 ;	assignBit
      000131 C2 A2            [12]  670 	clr	_EN_P2
                                    671 ;	src/libs/lcd.c:115: break;
                                    672 ;	src/libs/lcd.c:116: case DATABUS_P3:
      000133 80 1E            [24]  673 	sjmp	00112$
      000135                        674 00110$:
                                    675 ;	src/libs/lcd.c:117: LcdDatabus_P3 = ((cmd<<4) & 0xF0);
      000135 EF               [12]  676 	mov	a,r7
      000136 C4               [12]  677 	swap	a
      000137 54 F0            [12]  678 	anl	a,#0xf0
      000139 FF               [12]  679 	mov	r7,a
      00013A 74 F0            [12]  680 	mov	a,#0xf0
      00013C 5F               [12]  681 	anl	a,r7
      00013D F5 B0            [12]  682 	mov	_P3,a
                                    683 ;	src/libs/lcd.c:118: RS_P3 = LOW;
                                    684 ;	assignBit
      00013F C2 B0            [12]  685 	clr	_RS_P3
                                    686 ;	src/libs/lcd.c:119: RW_P3 = LOW;
                                    687 ;	assignBit
      000141 C2 B1            [12]  688 	clr	_RW_P3
                                    689 ;	src/libs/lcd.c:120: EN_P3 = HIGH;
                                    690 ;	assignBit
      000143 D2 B2            [12]  691 	setb	_EN_P3
                                    692 ;	src/libs/lcd.c:121: DELAY_us(1000);
      000145 90 03 E8         [24]  693 	mov	dptr,#0x03e8
      000148 12r00r00         [24]  694 	lcall	_DELAY_us
                                    695 ;	src/libs/lcd.c:122: EN_P3 = LOW;
                                    696 ;	assignBit
      00014B C2 B2            [12]  697 	clr	_EN_P3
                                    698 ;	src/libs/lcd.c:123: break;
                                    699 ;	src/libs/lcd.c:124: default:
      00014D 80 04            [24]  700 	sjmp	00112$
      00014F                        701 00111$:
                                    702 ;	src/libs/lcd.c:125: return -1;
      00014F 90 FF FF         [24]  703 	mov	dptr,#0xffff
                                    704 ;	src/libs/lcd.c:126: }
      000152 22               [24]  705 	ret
      000153                        706 00112$:
                                    707 ;	src/libs/lcd.c:132: DELAY_us(10000);
      000153 90 27 10         [24]  708 	mov	dptr,#0x2710
      000156 12r00r00         [24]  709 	lcall	_DELAY_us
                                    710 ;	src/libs/lcd.c:133: return 0;
      000159 90 00 00         [24]  711 	mov	dptr,#0x0000
                                    712 ;	src/libs/lcd.c:134: }
      00015C 22               [24]  713 	ret
                                    714 ;------------------------------------------------------------
                                    715 ;Allocation info for local variables in function 'LCDDataWrite'
                                    716 ;------------------------------------------------------------
                                    717 ;data                      Allocated to registers r7 
                                    718 ;------------------------------------------------------------
                                    719 ;	src/libs/lcd.c:136: int LCDDataWrite(char data){
                                    720 ;	-----------------------------------------
                                    721 ;	 function LCDDataWrite
                                    722 ;	-----------------------------------------
      00015D                        723 _LCDDataWrite:
      00015D AF 82            [24]  724 	mov	r7,dpl
                                    725 ;	src/libs/lcd.c:139: switch (__config.LCDDatabusType)
      00015F E5*0A            [12]  726 	mov	a,(___config + 0x0002)
      000161 FE               [12]  727 	mov	r6,a
      000162 24 FC            [12]  728 	add	a,#0xff - 0x03
      000164 50 03            [24]  729 	jnc	00123$
      000166 02r01rDB         [24]  730 	ljmp	00105$
      000169                        731 00123$:
      000169 EE               [12]  732 	mov	a,r6
      00016A 2E               [12]  733 	add	a,r6
                                    734 ;	src/libs/lcd.c:141: case DATABUS_P0:
      00016B 90r01r6F         [24]  735 	mov	dptr,#00124$
      00016E 73               [24]  736 	jmp	@a+dptr
      00016F                        737 00124$:
      00016F 80 06            [24]  738 	sjmp	00101$
      000171 80 1D            [24]  739 	sjmp	00102$
      000173 80 34            [24]  740 	sjmp	00103$
      000175 80 4B            [24]  741 	sjmp	00104$
      000177                        742 00101$:
                                    743 ;	src/libs/lcd.c:142: LcdDatabus_P0 = (data & 0xF0);
      000177 74 F0            [12]  744 	mov	a,#0xf0
      000179 5F               [12]  745 	anl	a,r7
      00017A F5 80            [12]  746 	mov	_P0,a
                                    747 ;	src/libs/lcd.c:143: RS_P0 = HIGH;
                                    748 ;	assignBit
      00017C D2 80            [12]  749 	setb	_RS_P0
                                    750 ;	src/libs/lcd.c:144: RW_P0 = LOW;
                                    751 ;	assignBit
      00017E C2 81            [12]  752 	clr	_RW_P0
                                    753 ;	src/libs/lcd.c:145: EN_P0 = HIGH;
                                    754 ;	assignBit
      000180 D2 82            [12]  755 	setb	_EN_P0
                                    756 ;	src/libs/lcd.c:146: DELAY_us(1000);
      000182 90 03 E8         [24]  757 	mov	dptr,#0x03e8
      000185 C0 07            [24]  758 	push	ar7
      000187 12r00r00         [24]  759 	lcall	_DELAY_us
      00018A D0 07            [24]  760 	pop	ar7
                                    761 ;	src/libs/lcd.c:147: EN_P0 = LOW;
                                    762 ;	assignBit
      00018C C2 82            [12]  763 	clr	_EN_P0
                                    764 ;	src/libs/lcd.c:148: break;
                                    765 ;	src/libs/lcd.c:150: case DATABUS_P1:
      00018E 80 4F            [24]  766 	sjmp	00106$
      000190                        767 00102$:
                                    768 ;	src/libs/lcd.c:151: LcdDatabus_P1 = (data & 0xF0);
      000190 74 F0            [12]  769 	mov	a,#0xf0
      000192 5F               [12]  770 	anl	a,r7
      000193 F5 90            [12]  771 	mov	_P1,a
                                    772 ;	src/libs/lcd.c:152: RS_P1 = HIGH;
                                    773 ;	assignBit
      000195 D2 90            [12]  774 	setb	_RS_P1
                                    775 ;	src/libs/lcd.c:153: RW_P1 = LOW;
                                    776 ;	assignBit
      000197 C2 91            [12]  777 	clr	_RW_P1
                                    778 ;	src/libs/lcd.c:154: EN_P1 = HIGH;
                                    779 ;	assignBit
      000199 D2 92            [12]  780 	setb	_EN_P1
                                    781 ;	src/libs/lcd.c:155: DELAY_us(1000);
      00019B 90 03 E8         [24]  782 	mov	dptr,#0x03e8
      00019E C0 07            [24]  783 	push	ar7
      0001A0 12r00r00         [24]  784 	lcall	_DELAY_us
      0001A3 D0 07            [24]  785 	pop	ar7
                                    786 ;	src/libs/lcd.c:156: EN_P1 = LOW;
                                    787 ;	assignBit
      0001A5 C2 92            [12]  788 	clr	_EN_P1
                                    789 ;	src/libs/lcd.c:157: break;
                                    790 ;	src/libs/lcd.c:159: case DATABUS_P2:
      0001A7 80 36            [24]  791 	sjmp	00106$
      0001A9                        792 00103$:
                                    793 ;	src/libs/lcd.c:160: LcdDatabus_P2 = (data & 0xF0);
      0001A9 74 F0            [12]  794 	mov	a,#0xf0
      0001AB 5F               [12]  795 	anl	a,r7
      0001AC F5 A0            [12]  796 	mov	_P2,a
                                    797 ;	src/libs/lcd.c:161: RS_P2 = HIGH;
                                    798 ;	assignBit
      0001AE D2 A0            [12]  799 	setb	_RS_P2
                                    800 ;	src/libs/lcd.c:162: RW_P2 = LOW;
                                    801 ;	assignBit
      0001B0 C2 A1            [12]  802 	clr	_RW_P2
                                    803 ;	src/libs/lcd.c:163: EN_P2 = HIGH;
                                    804 ;	assignBit
      0001B2 D2 A2            [12]  805 	setb	_EN_P2
                                    806 ;	src/libs/lcd.c:164: DELAY_us(1000);
      0001B4 90 03 E8         [24]  807 	mov	dptr,#0x03e8
      0001B7 C0 07            [24]  808 	push	ar7
      0001B9 12r00r00         [24]  809 	lcall	_DELAY_us
      0001BC D0 07            [24]  810 	pop	ar7
                                    811 ;	src/libs/lcd.c:165: EN_P2 = LOW;
                                    812 ;	assignBit
      0001BE C2 A2            [12]  813 	clr	_EN_P2
                                    814 ;	src/libs/lcd.c:166: break;
                                    815 ;	src/libs/lcd.c:168: case DATABUS_P3:
      0001C0 80 1D            [24]  816 	sjmp	00106$
      0001C2                        817 00104$:
                                    818 ;	src/libs/lcd.c:169: LcdDatabus_P3 = (data & 0xF0);
      0001C2 74 F0            [12]  819 	mov	a,#0xf0
      0001C4 5F               [12]  820 	anl	a,r7
      0001C5 F5 B0            [12]  821 	mov	_P3,a
                                    822 ;	src/libs/lcd.c:170: RS_P3 = HIGH;
                                    823 ;	assignBit
      0001C7 D2 B0            [12]  824 	setb	_RS_P3
                                    825 ;	src/libs/lcd.c:171: RW_P3 = LOW;
                                    826 ;	assignBit
      0001C9 C2 B1            [12]  827 	clr	_RW_P3
                                    828 ;	src/libs/lcd.c:172: EN_P3 = HIGH;
                                    829 ;	assignBit
      0001CB D2 B2            [12]  830 	setb	_EN_P3
                                    831 ;	src/libs/lcd.c:173: DELAY_us(1000);
      0001CD 90 03 E8         [24]  832 	mov	dptr,#0x03e8
      0001D0 C0 07            [24]  833 	push	ar7
      0001D2 12r00r00         [24]  834 	lcall	_DELAY_us
      0001D5 D0 07            [24]  835 	pop	ar7
                                    836 ;	src/libs/lcd.c:174: EN_P3 = LOW;
                                    837 ;	assignBit
      0001D7 C2 B2            [12]  838 	clr	_EN_P3
                                    839 ;	src/libs/lcd.c:175: break;
                                    840 ;	src/libs/lcd.c:177: default:
      0001D9 80 04            [24]  841 	sjmp	00106$
      0001DB                        842 00105$:
                                    843 ;	src/libs/lcd.c:178: return -1;
      0001DB 90 FF FF         [24]  844 	mov	dptr,#0xffff
      0001DE 22               [24]  845 	ret
                                    846 ;	src/libs/lcd.c:179: }
      0001DF                        847 00106$:
                                    848 ;	src/libs/lcd.c:182: DELAY_us(10000);
      0001DF 90 27 10         [24]  849 	mov	dptr,#0x2710
      0001E2 C0 07            [24]  850 	push	ar7
      0001E4 12r00r00         [24]  851 	lcall	_DELAY_us
      0001E7 D0 07            [24]  852 	pop	ar7
                                    853 ;	src/libs/lcd.c:184: switch (__config.LCDDatabusType)
      0001E9 E5*0A            [12]  854 	mov	a,(___config + 0x0002)
      0001EB FE               [12]  855 	mov	r6,a
      0001EC 24 FC            [12]  856 	add	a,#0xff - 0x03
      0001EE 50 03            [24]  857 	jnc	00125$
      0001F0 02r02r6F         [24]  858 	ljmp	00111$
      0001F3                        859 00125$:
      0001F3 EE               [12]  860 	mov	a,r6
      0001F4 2E               [12]  861 	add	a,r6
                                    862 ;	src/libs/lcd.c:186: case DATABUS_P0:
      0001F5 90r01rF9         [24]  863 	mov	dptr,#00126$
      0001F8 73               [24]  864 	jmp	@a+dptr
      0001F9                        865 00126$:
      0001F9 80 06            [24]  866 	sjmp	00107$
      0001FB 80 20            [24]  867 	sjmp	00108$
      0001FD 80 3A            [24]  868 	sjmp	00109$
      0001FF 80 54            [24]  869 	sjmp	00110$
      000201                        870 00107$:
                                    871 ;	src/libs/lcd.c:187: LcdDatabus_P0 = ((data<<4) & 0xF0);
      000201 8F 06            [24]  872 	mov	ar6,r7
      000203 EE               [12]  873 	mov	a,r6
      000204 C4               [12]  874 	swap	a
      000205 54 F0            [12]  875 	anl	a,#0xf0
      000207 FE               [12]  876 	mov	r6,a
      000208 74 F0            [12]  877 	mov	a,#0xf0
      00020A 5E               [12]  878 	anl	a,r6
      00020B F5 80            [12]  879 	mov	_P0,a
                                    880 ;	src/libs/lcd.c:188: RS_P0 = HIGH;
                                    881 ;	assignBit
      00020D D2 80            [12]  882 	setb	_RS_P0
                                    883 ;	src/libs/lcd.c:189: RW_P0 = LOW;
                                    884 ;	assignBit
      00020F C2 81            [12]  885 	clr	_RW_P0
                                    886 ;	src/libs/lcd.c:190: EN_P0 = HIGH;
                                    887 ;	assignBit
      000211 D2 82            [12]  888 	setb	_EN_P0
                                    889 ;	src/libs/lcd.c:191: DELAY_us(1000);
      000213 90 03 E8         [24]  890 	mov	dptr,#0x03e8
      000216 12r00r00         [24]  891 	lcall	_DELAY_us
                                    892 ;	src/libs/lcd.c:192: EN_P0 = LOW;
                                    893 ;	assignBit
      000219 C2 82            [12]  894 	clr	_EN_P0
                                    895 ;	src/libs/lcd.c:193: break;
                                    896 ;	src/libs/lcd.c:194: case DATABUS_P1:
      00021B 80 56            [24]  897 	sjmp	00112$
      00021D                        898 00108$:
                                    899 ;	src/libs/lcd.c:195: LcdDatabus_P1 = ((data<<4) & 0xF0);
      00021D 8F 06            [24]  900 	mov	ar6,r7
      00021F EE               [12]  901 	mov	a,r6
      000220 C4               [12]  902 	swap	a
      000221 54 F0            [12]  903 	anl	a,#0xf0
      000223 FE               [12]  904 	mov	r6,a
      000224 74 F0            [12]  905 	mov	a,#0xf0
      000226 5E               [12]  906 	anl	a,r6
      000227 F5 90            [12]  907 	mov	_P1,a
                                    908 ;	src/libs/lcd.c:196: RS_P1 = HIGH;
                                    909 ;	assignBit
      000229 D2 90            [12]  910 	setb	_RS_P1
                                    911 ;	src/libs/lcd.c:197: RW_P1 = LOW;
                                    912 ;	assignBit
      00022B C2 91            [12]  913 	clr	_RW_P1
                                    914 ;	src/libs/lcd.c:198: EN_P1 = HIGH;
                                    915 ;	assignBit
      00022D D2 92            [12]  916 	setb	_EN_P1
                                    917 ;	src/libs/lcd.c:199: DELAY_us(1000);
      00022F 90 03 E8         [24]  918 	mov	dptr,#0x03e8
      000232 12r00r00         [24]  919 	lcall	_DELAY_us
                                    920 ;	src/libs/lcd.c:200: EN_P1 = LOW;
                                    921 ;	assignBit
      000235 C2 92            [12]  922 	clr	_EN_P1
                                    923 ;	src/libs/lcd.c:201: break;
                                    924 ;	src/libs/lcd.c:202: case DATABUS_P2:
      000237 80 3A            [24]  925 	sjmp	00112$
      000239                        926 00109$:
                                    927 ;	src/libs/lcd.c:203: LcdDatabus_P2 = ((data<<4) & 0xF0);
      000239 8F 06            [24]  928 	mov	ar6,r7
      00023B EE               [12]  929 	mov	a,r6
      00023C C4               [12]  930 	swap	a
      00023D 54 F0            [12]  931 	anl	a,#0xf0
      00023F FE               [12]  932 	mov	r6,a
      000240 74 F0            [12]  933 	mov	a,#0xf0
      000242 5E               [12]  934 	anl	a,r6
      000243 F5 A0            [12]  935 	mov	_P2,a
                                    936 ;	src/libs/lcd.c:204: RS_P2 = HIGH;
                                    937 ;	assignBit
      000245 D2 A0            [12]  938 	setb	_RS_P2
                                    939 ;	src/libs/lcd.c:205: RW_P2 = LOW;
                                    940 ;	assignBit
      000247 C2 A1            [12]  941 	clr	_RW_P2
                                    942 ;	src/libs/lcd.c:206: EN_P2 = HIGH;
                                    943 ;	assignBit
      000249 D2 A2            [12]  944 	setb	_EN_P2
                                    945 ;	src/libs/lcd.c:207: DELAY_us(1000);
      00024B 90 03 E8         [24]  946 	mov	dptr,#0x03e8
      00024E 12r00r00         [24]  947 	lcall	_DELAY_us
                                    948 ;	src/libs/lcd.c:208: EN_P2 = LOW;
                                    949 ;	assignBit
      000251 C2 A2            [12]  950 	clr	_EN_P2
                                    951 ;	src/libs/lcd.c:209: break;
                                    952 ;	src/libs/lcd.c:210: case DATABUS_P3:
      000253 80 1E            [24]  953 	sjmp	00112$
      000255                        954 00110$:
                                    955 ;	src/libs/lcd.c:211: LcdDatabus_P3 = ((data<<4) & 0xF0);
      000255 EF               [12]  956 	mov	a,r7
      000256 C4               [12]  957 	swap	a
      000257 54 F0            [12]  958 	anl	a,#0xf0
      000259 FF               [12]  959 	mov	r7,a
      00025A 74 F0            [12]  960 	mov	a,#0xf0
      00025C 5F               [12]  961 	anl	a,r7
      00025D F5 B0            [12]  962 	mov	_P3,a
                                    963 ;	src/libs/lcd.c:212: RS_P3 = HIGH;
                                    964 ;	assignBit
      00025F D2 B0            [12]  965 	setb	_RS_P3
                                    966 ;	src/libs/lcd.c:213: RW_P3 = LOW;
                                    967 ;	assignBit
      000261 C2 B1            [12]  968 	clr	_RW_P3
                                    969 ;	src/libs/lcd.c:214: EN_P3 = HIGH;
                                    970 ;	assignBit
      000263 D2 B2            [12]  971 	setb	_EN_P3
                                    972 ;	src/libs/lcd.c:215: DELAY_us(1000);
      000265 90 03 E8         [24]  973 	mov	dptr,#0x03e8
      000268 12r00r00         [24]  974 	lcall	_DELAY_us
                                    975 ;	src/libs/lcd.c:216: EN_P3 = LOW;
                                    976 ;	assignBit
      00026B C2 B2            [12]  977 	clr	_EN_P3
                                    978 ;	src/libs/lcd.c:217: break;
                                    979 ;	src/libs/lcd.c:218: default:
      00026D 80 04            [24]  980 	sjmp	00112$
      00026F                        981 00111$:
                                    982 ;	src/libs/lcd.c:219: return -1;
      00026F 90 FF FF         [24]  983 	mov	dptr,#0xffff
                                    984 ;	src/libs/lcd.c:220: }
      000272 22               [24]  985 	ret
      000273                        986 00112$:
                                    987 ;	src/libs/lcd.c:224: DELAY_us(10000);
      000273 90 27 10         [24]  988 	mov	dptr,#0x2710
      000276 12r00r00         [24]  989 	lcall	_DELAY_us
                                    990 ;	src/libs/lcd.c:225: return 0;
      000279 90 00 00         [24]  991 	mov	dptr,#0x0000
                                    992 ;	src/libs/lcd.c:226: }
      00027C 22               [24]  993 	ret
                                    994 ;------------------------------------------------------------
                                    995 ;Allocation info for local variables in function 'printString'
                                    996 ;------------------------------------------------------------
                                    997 ;string                    Allocated with name '_printString_PARM_2'
                                    998 ;line                      Allocated to registers r7 
                                    999 ;------------------------------------------------------------
                                   1000 ;	src/libs/lcd.c:228: void printString(uint8_t line, char* string){
                                   1001 ;	-----------------------------------------
                                   1002 ;	 function printString
                                   1003 ;	-----------------------------------------
      00027D                       1004 _printString:
                                   1005 ;	src/libs/lcd.c:229: if (line == FIRST_LINE){
      00027D E5 82            [12] 1006 	mov	a,dpl
      00027F FF               [12] 1007 	mov	r7,a
      000280 70 08            [24] 1008 	jnz	00110$
                                   1009 ;	src/libs/lcd.c:230: LCDCmdWrite(CURSOR_TO_FIRST_LINE);
      000282 75 82 80         [24] 1010 	mov	dpl,#0x80
      000285 12r00r3D         [24] 1011 	lcall	_LCDCmdWrite
      000288 80 1F            [24] 1012 	sjmp	00122$
      00028A                       1013 00110$:
                                   1014 ;	src/libs/lcd.c:232: else if (line == SECOND_LINE){
      00028A BF 01 08         [24] 1015 	cjne	r7,#0x01,00107$
                                   1016 ;	src/libs/lcd.c:233: LCDCmdWrite(CURSOR_TO_SECOND_LINE);
      00028D 75 82 C0         [24] 1017 	mov	dpl,#0xc0
      000290 12r00r3D         [24] 1018 	lcall	_LCDCmdWrite
      000293 80 14            [24] 1019 	sjmp	00122$
      000295                       1020 00107$:
                                   1021 ;	src/libs/lcd.c:235: else if (line == THIRD_LINE){
      000295 BF 02 08         [24] 1022 	cjne	r7,#0x02,00104$
                                   1023 ;	src/libs/lcd.c:236: LCDCmdWrite(CURSOR_TO_THIRD_LINE);
      000298 75 82 90         [24] 1024 	mov	dpl,#0x90
      00029B 12r00r3D         [24] 1025 	lcall	_LCDCmdWrite
      00029E 80 09            [24] 1026 	sjmp	00122$
      0002A0                       1027 00104$:
                                   1028 ;	src/libs/lcd.c:238: else if (line == FORTH_LINE){
      0002A0 BF 03 06         [24] 1029 	cjne	r7,#0x03,00122$
                                   1030 ;	src/libs/lcd.c:239: LCDCmdWrite(CURSOR_TO_FORTH_LINE);
      0002A3 75 82 D0         [24] 1031 	mov	dpl,#0xd0
      0002A6 12r00r3D         [24] 1032 	lcall	_LCDCmdWrite
                                   1033 ;	src/libs/lcd.c:242: while(*string){
      0002A9                       1034 00122$:
      0002A9 AD*0B            [24] 1035 	mov	r5,_printString_PARM_2
      0002AB AE*0C            [24] 1036 	mov	r6,(_printString_PARM_2 + 1)
      0002AD AF*0D            [24] 1037 	mov	r7,(_printString_PARM_2 + 2)
      0002AF                       1038 00112$:
      0002AF 8D 82            [24] 1039 	mov	dpl,r5
      0002B1 8E 83            [24] 1040 	mov	dph,r6
      0002B3 8F F0            [24] 1041 	mov	b,r7
      0002B5 12r00r00         [24] 1042 	lcall	__gptrget
      0002B8 FC               [12] 1043 	mov	r4,a
      0002B9 60 18            [24] 1044 	jz	00115$
                                   1045 ;	src/libs/lcd.c:243: LCDDataWrite(*string++);
      0002BB 8C 82            [24] 1046 	mov	dpl,r4
      0002BD 0D               [12] 1047 	inc	r5
      0002BE BD 00 01         [24] 1048 	cjne	r5,#0x00,00150$
      0002C1 0E               [12] 1049 	inc	r6
      0002C2                       1050 00150$:
      0002C2 C0 07            [24] 1051 	push	ar7
      0002C4 C0 06            [24] 1052 	push	ar6
      0002C6 C0 05            [24] 1053 	push	ar5
      0002C8 12r01r5D         [24] 1054 	lcall	_LCDDataWrite
      0002CB D0 05            [24] 1055 	pop	ar5
      0002CD D0 06            [24] 1056 	pop	ar6
      0002CF D0 07            [24] 1057 	pop	ar7
      0002D1 80 DC            [24] 1058 	sjmp	00112$
      0002D3                       1059 00115$:
                                   1060 ;	src/libs/lcd.c:245: }
      0002D3 22               [24] 1061 	ret
                                   1062 	.area CSEG    (CODE)
                                   1063 	.area CONST   (CODE)
                                   1064 	.area XINIT   (CODE)
                                   1065 	.area CABS    (ABS,CODE)
